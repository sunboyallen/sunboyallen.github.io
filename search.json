[{"title":"VS Code 设置复制文本时不带格式样式不带语法高亮","url":"/vscode-copy-formatting/","content":"\n省流，VS Code 是默认设置复制文本时带上格式，样式，语法高亮的。如需取消勾选，将设置中`Editor: Copy With Syntax Highlighting`，该项取消勾选即可。如要搜索该项，其他可搜索的关键词包括：`复制`，`语法高亮`。或者搜索或设置`settings.json`相应的配置项`\"editor.copyWithSyntaxHighlighting\": false`。\n\n个人感觉，他这个设置项的命名不是那么完美，但大概已经是尽量好的一种写法了。实际上，即使对于`txt`这种不带语法高亮的文件格式，他默认复制文本然后粘贴到其他地方，如果保留源格式粘贴，依然是会保留背景色，字体等内容的。而取消勾选之后，包括这些在内的所有的样式都相应去掉了。个人认为他这个设置项的命名应该带有`样式`或者`格式`，`format`之类的字眼。可惜加了这些词的话，配置项的名字又太长。而如果只写格式样式不写语法高亮的话，这个项又没那么有辨识度。感觉还是有些为难，没法做到那么完美，VS Code 大概已经尽力了。\n\n要我自己选的话，我是比较希望 VS Code 能够默认复制不带格式的。以我个人的观点，对于常编程，善于使用、喜欢和管理各种纯文本文件的用户来说，大概是不太喜欢或者很少需要使用这种复制带格式的情况吧，特别是平时如果非特殊要求，大概很少会做那种，要求把代码带格式带语法高亮复制到微软 Word 等富文本文件的事情，之类的。一般如果要在文档中插入代码，基本是在 markdown 加代码块，或者是 latex 加代码，写伪代码。渲染啊排版啊什么的没特殊要求，基本交给默认的渲染引擎去处理。如果 VS Code 真要为编程用户着想，是否考虑应该默认关闭这个选项，即，默认复制不带格式样式，比较合适一些。\n\n不过我猜测，VS Code 这么设置的考量可能是，一方面初学者或者轻度使用者带格式复制粘贴的需求不见得很少，另一方面除了在复制端控制不带格式复制，实际上也可以在粘贴端控制将文本不带格式粘贴。\n\n不带格式粘贴的通用的快捷键是<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd>，适用于各种文本编辑器。较新版本的微软 Office 比如 Word 也可以使用该快捷方式，从而在粘贴时，不带格式粘贴。\n\n另据资料，早期在微软 Office，上述快捷键好像是用于格式刷，与<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>配合使用，用于格式的复制粘贴。大概是因为这一点与常规的文本编辑器的功能不一致而常被吐槽，后来微软 Word 才把格式刷的快捷键改为<kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>C</kbd>和<kbd>Alt</kbd>+<kbd>Ctrl</kbd>+<kbd>V</kbd>。从效果上看，这个改动还是很好的，不过还能看到一些不明真相和原因的用户在微软社区有提问和抱怨。嘛，这个倒也无可厚非。\n"},{"title":"使用 Scoop 在 Windows 进行软件包管理","url":"/scoop/","content":"\n[https://scoop.sh/](https://scoop.sh/)\n\n[https://github.com/ScoopInstaller/Scoop](https://github.com/ScoopInstaller/Scoop)\n\n正如作者所说，灵感来自 Homebrew 和 Sub。完全可以把 Scoop 看成是 Windows 的 Homebrew。\n\n[https://github.com/ScoopInstaller/Scoop/wiki](https://github.com/ScoopInstaller/Scoop/wiki)\n\n相关的介绍文章，在网上其实有很多，比如少数派也写过几篇。不过很多文章的年代比较久远，很多当时反映的问题已经得到解决。下面这篇是相对较新的了。\n\n[https://zhuanlan.zhihu.com/p/463284082](https://zhuanlan.zhihu.com/p/463284082)\n\n# Quick Start\n\n[https://github.com/ScoopInstaller/Scoop/wiki/Quick-Start](https://github.com/ScoopInstaller/Scoop/wiki/Quick-Start)\n\n首先用管理员模式运行 PowerShell。\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n然后关闭 PowerShell，再用普通模式运行 PowerShell。\n\n国内镜像优化库。\n\n[https://gitee.com/scoop-installer/scoop](https://gitee.com/scoop-installer/scoop)\n\n```powershell\nInvoke-WebRequest -UseBasicParsing scoop.201704.xyz | Invoke-Expression\n```\n\n如果还没安装 Git，在进行比如更新和添加仓库等操作的时候，Scoop 会提示说要先安装 Git。\n\n```powershell\nscoop install git\n```\n\n安装 Git 的时候，如果还没安装 7-Zip，Scoop 一般会给你先安装 7-Zip。当然也可以自己操作，这样也方便记得可以添加右键菜单。\n\n```powershell\nscoop install 7zip\n```\n\n具体见后。\n\n关于 Git 的相关配置，见后文的说明。\n\n下面的操作是针对已经安装了 Scoop 的情况。用于换源。\n\n```powershell\nscoop config SCOOP_REPO \"https://gitee.com/scoop-installer/scoop\"\nscoop update\n```\n\n# Commands\n\n[https://github.com/ScoopInstaller/Scoop/wiki/Commands](https://github.com/ScoopInstaller/Scoop/wiki/Commands)\n\n```powershell\nscoop help\nscoop help <command>\n```\n\n```powershell\nscoop search <query>\n```\n\n一个好的习惯是，在`install`之前，先用`search`搜索一下，确认所需安装的软件包。\n\n此处不建议在一行命令中一次安装多个软件包。一些软件包在安装后，会给出提示进行后续操作，主要是添加注册表，以便添加右键菜单或者其他功能，可以根据需要，运行他所提示的相关命令。\n\n```powershell\nscoop install <app> [options]\n```\n\n```powershell\nscoop update <app> [options]\n```\n\n`scoop update`用于将 Scoop 自身更新到最新版本。`scoop update <app>`用于更新指定软件包。\n\n```powershell\nscoop status\n```\n\n用于检查软件包的状态，比如是否正常安装，是否有需要更新的。建议在使用`status`之前，先用`update`更新仓库。\n\n```powershell\nscoop cache show|rm [app(s)]\n```\n\n清理缓存。\n\n```powershell\nscoop cleanup <app> [options]\n```\n\n通过移除旧版本来清理软件包。\n\n```powershell\nscoop info <app> [options]\n```\n\n用于查看特定软件的信息，包括版本，所在仓库，二进制文件，环境，注意事项等。\n\n# Buckets\n\n[https://github.com/ScoopInstaller/Scoop/wiki/Buckets](https://github.com/ScoopInstaller/Scoop/wiki/Buckets)\n\n仓库。\n\n```powershell\nscoop bucket known\n```\n\n后文的安装操作，默认用户已经添加了以下这些仓库。\n\n```powershell\nscoop bucket add extras\nscoop bucket add java\nscoop bucket add versions\n```\n\n关于软件包能收录到 main 仓库的标准，可以看这篇。\n\n[https://github.com/ScoopInstaller/Scoop/wiki/Criteria-for-including-apps-in-the-main-bucket](https://github.com/ScoopInstaller/Scoop/wiki/Criteria-for-including-apps-in-the-main-bucket)\n\n# 列表\n\n以下是自己安装使用的一部分软件包，也仅仅是一小部分。并且会把相关的关键词给出，便于检索。\n\n实际上，在 main 仓库中已经有一千多个软件包，在 extra 仓库中有两千多个软件包，开发相关的包基本是有了。不用担心版本的事情，总体上版本也是和官方同步一致的。\n\n然而，也不是所有在 Scoop 上能安装的软件包都推荐用 Scoop 安装的。\n\n有一类是需要用管理员模式才能安装的软件包。这种包他安装之后还会添加到控制面板中的程序列表里面，比如`openvpn`。虽然用`scoop uninstall`卸载之后，相应的程序列表中一般也会删除该项，然而终究不是那么合适。既然都用管理员模式才能安装了，意味着需要操作到系统内部的事情。真不如直接从官网下载直接安装。\n\n另一类是东西不全放在`scoop`目录，而是还会在其他地方放东西的。比如`qq-nt`，他的`Tencent Files`文件夹还是放在`%USERPROFILE%\\Documents`目录下。即使`scoop uninstall`卸载了，东西还是会在那。在还没做到 Scoop 标准化之前，这类软件也还是在官网安装得了。\n\n此处额外鞭尸 Format Factory 格式工厂。具体写在另一篇文章进行说明。\n\n## 7-Zip\n\n```powershell\nscoop install 7zip\n```\n\n有 GUI 的。\n\n安装后应该是会提示说可以添加右键菜单，可以根据需要，运行相应的命令。\n\n\n## Git\n\n```powershell\nscoop install git\n```\n\n安装完成之后，会提示说可以添加右键菜单，可以根据需要，运行相应的命令。\n\n相比于直接运行 Git for Windows 的安装程序，在安装的时候设置换行符，默认分支名等内容，使用 Scoop 安装的 Git，记得自行设置好。\n\n```shell\ngit config --global core.autocrlf input\n```\n\n```shell\ngit config --global init.defaultBranch main\n```\n\n如果忘了设置默认分支名，在 Git Bash 中，初次初始化仓库的时候，会提示相关操作，可以进行修改。\n\n```shell\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n```\n\n## Visual Studio Code\n\n```powershell\nscoop install vscode\n```\n\n安装完成之后，会提示说可以添加右键菜单，可以根据需要，运行相应的命令。\n\n可以设置 VS Code 作为默认的 Git 合并和比较工具。\n\n```shell\ngit config --global merge.tool vscode\ngit config --global mergetool.vscode.cmd \"code --wait $MERGED\"\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd \"code --wait --diff $LOCAL $REMOTE\"\n```\n\n## MinGW-w64\n\nC++ 相关。\n\n```powershell\nscoop install mingw\n```\n\n这是我见过最方便的，在 Windows 上使用 VS Code 搭建 C++ 开发环境的方式。\n\n请不要按照网上一些文章的说法去安装`gcc`，`gdb`之类的。请直接安装`mingw`，这样 VS Code 才能方便直接识别，运行 C++ 文件。\n\n## CMake\n\n```powershell\nscoop install cmake\n```\n\n有 GUI 的。\n\n## Python\n\n```powershell\nscoop search python\n```\n\n根据需要，安装所需的版本。\n\n可以管理多个 Python 版本。要使用哪个版本就`reset`到哪个版本。\n\n```powershell\nscoop reset python311\n```\n\n虽然 Scoop 是可以安装 pyenv 的，但是此处反而不推荐安装 pyenv。经过测试，如果之前没有安装过 pyenv for Windows，或者是删除掉之后，包括把环境变量等内容都删除干净了，再在 Scoop 安装 pyenv，那在当使用这个 pyenv 安装所需的 Python 版本的时候，会遇到安装失败的问题。\n\n```\n:: [Info] ::  Mirror: https://www.python.org/ftp/python\n:: [Installing] ::  3.11.9 ...\n:: [Error] :: error installing \"core\" component MSI.\n:: [Error] :: couldn't install 3.11.9\n```\n\n[https://github.com/pyenv-win/pyenv-win/issues/449](https://github.com/pyenv-win/pyenv-win/issues/449)\n\n[https://pyenv-win.github.io/pyenv-win/](https://pyenv-win.github.io/pyenv-win/)\n\n而如果之前是安装过 pyenv for Windows，删除掉他之后，在删除用户环境变量的时候，删除`PATH`变量中的相关值，但保留`PYENV_ROOT`等变量不去改动，然后再用 scoop 安装 pyenv，那么再去安装所需 Python 版本的时候就不会有之前所说的问题。\n\n所以如果非得在 Scoop 安装并使用 pyenv，如果遇到之前的问题了，一个解决办法就是先按照 pyenv for Windows 官网的方式安装 pyenv，然后按照之前的方式卸载，保留一部分环境变量，再在 Scoop 安装 pyenv，来处理。然而这样子一看就显得各种操作非常多余。\n\n所以干脆不用 pyenv 了，直接用 scoop 管理 Python 版本。\n\n## Java\n\nJDK\n\nJava Development Kit\n\n[https://github.com/ScoopInstaller/Java/wiki](https://github.com/ScoopInstaller/Java/wiki)\n\n```powershell\nscoop search jdk\n```\n\n根据需要，安装所需的 JDK 版本。\n\n可以管理多个 JDK 版本。\n\n```powershell\nscoop reset openjdk17\n```\n\n这也是我见过的最方便的，在 Windows 下，管理和切换不同的 JDK 版本的方式。\n\n## Maven\n\n```powershell\nscoop install maven\n```\n\n## JetBrains Toolbox\n\nIntelliJ IDEA\n\n```powershell\nscoop install jetbrains-toolbox\n```\n\n有 JetBrains Toolbox 了感觉就不用再单独安装 IDEA 了。\n\n```powershell\nscoop search idea\n```\n\n## Node.js\n\n```powershell\nscoop search nodejs\n```\n\n可以用 Scoop 管理 Node.js 版本。当然直接用 Scoop 安装 nvm 来管理更方便。\n\n```powershell\nscoop install nvm\n```\n\n## Microsoft .NET SDK\n\n```powershell\nscoop search dotnet\n```\n\n根据需要，安装所需的 dotnet-sdk 版本。\n\n## MiKTeX\n\nLaTeX\n\n```powershell\nscoop install miktex\nscoop install perl\n```\n\n此处注意，由于历史原因，在 Scoop 上的`latex`是`miktex`的别名。如果运行`scoop install latex`其实就是安装`miktex`，但是不推荐使用这个命令安装，依然还是直接安装`miktex`即可。\n\n这里注意，需要再安装`perl`。这里安装完`miktex`之后并不会给出提示说安装`perl`，但是在之后编译 tex 文件，在需要下载宏包的时候，是需要用到`perl`的，如果不安装会报错。我也是在报错信息中看到找不到`perl`，然后再去安装的。\n\n有 GUI 的。\n\n## Clash Verge Rev\n\n```powershell\nscoop install clash-verge-rev\n```\n\n## v2rayN\n\n```powershell\nscoop install v2rayn\n```\n\n需要安装运行所需要的 .NET 版本。大版本号需要符合。可以用 Scoop 安装。\n\n## scoop-completion\n\n用于自动补全 Scoop 命令。\n\n```powershell\nscoop install scoop-completion\n```\n\n其中的 Note 内容已经过时，不建议按照里面的方式来操作。建议看在 GitHub 仓库的`README.md`中的说明。\n\n[https://github.com/Moeologist/scoop-completion](https://github.com/Moeologist/scoop-completion)\n\n相关命令如下。可以添加到`$PROFILE`中，使得 PowerShell 启动时自动加载。\n\n```powershell\nImport-Module \"$($(Get-Item $(Get-Command scoop.ps1).Path).Directory.Parent.FullName)\\modules\\scoop-completion\"\n```\n\n## Pandoc\n\n```powershell\nscoop install pandoc\n```\n\n## Typora\n\n```powershell\nscoop search typora\n```\n\n显然是有 GUI 的。\n\n选择所需版本安装。\n\n## Zotero\n\n```powershell\nscoop install zotero\n```\n\n显然是有 GUI 的。\n\n## PowerToys\n\n```powershell\nscoop install powertoys\n```\n\n有 GUI 的。\n\n## VLC media player\n\n```powershell\nscoop install vlc\n```\n\n显然是有 GUI 的。\n\n## Chrome\n\n以及 Chromium。\n\n```powershell\nscoop search chrome\nscoop search chromium\nscoop install googlechrome\n```\n\n显然是有 GUI 的。\n\n如果是用 Python 的 Selenium 包进行自动化测试，那么就不需要再去安装 Microsoft Edge WebDriver，ChromeDriver，geckodriver 这些了，虽然这些用 Scoop 能安装。目前版本的 Selenium 除了检测电脑是否有相应的 WebDriver 之外，还能够自动下载这些 WebDriver 到他的缓存里。甚至连 Firefox 都不用安装了，他也会自动帮你下载。上述这些，他下载缓存的位置在`~/.cache/selenium`。\n\n对于 Firefox，他同样会自动给你安装。而 geckodriver 如果一直没下载下来的话，需要开梯子。\n\n对于 Chrome，安装完 Chrome 之后记得重启电脑。用户环境变量会添加`CHROME_EXECUTABLE`值，但是需要重启电脑之后，Python 才能获取到该值。\n\n## Qt\n\nQt Creator\n\n```powershell\nscoop install qt-creator\nscoop install aqtinstall\n```\n\n使用 aqtinstall 来安装所需的 Qt 版本。\n\n[aqtinstall](/aqtinstall)\n\n在 Qt Creator 的菜单栏，编辑-首选项-构建套件，添加所安装的 Qt 版本，然后添加构建套件。构建套件一般需要自己命名，比如`Desktop Qt 6.8.0 MinGW 64bit`。\n\n## Postman\n\n```powershell\nscoop install postman\n```\n\n显然是有 GUI 的。\n\n## InfluxDB\n\n```powershell\nscoop install influxdb\nscoop install influx\n```\n\n使用时，单开一个 PowerShell 窗口，运行`influxd`。\n"},{"title":"查看自己 Windows 电脑的产品密钥","url":"/windows-product-key/","content":"\n是看了这个知乎回答。\n\n[https://www.zhihu.com/question/382395980/answer/1103795774](https://www.zhihu.com/question/382395980/answer/1103795774)\n\n一个是原始产品密钥。\n\n```powershell\nwmic path softwarelicensingservice get OA3xOriginalProductKey\n```\n\n另一个是备份产品密钥，在注册表查看。`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform`，`BackupProductKeyDefault`内容就是。\n\n等效的 PowerShell 命令。\n\n```powershell\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\" -Name BackupProductKeyDefault\n```\n"},{"title":"在 VS Code 使用 ClangFormat 格式化 C/C++ 代码文件","url":"/vscode-clang-format/","content":"\n众所周知，在 VS Code 很容易对代码文件进行格式化。一般就是在编辑器右键，选择格式化文档，相应的快捷键是<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>F</kbd>。在插件的加持下，多数编程语言都能支持，对于 C/C++ 同样如此。\n\n[https://code.visualstudio.com/docs/cpp/cpp-ide](https://code.visualstudio.com/docs/cpp/cpp-ide)\n\n[https://clang.llvm.org/docs/ClangFormat.html](https://clang.llvm.org/docs/ClangFormat.html)\n\n常用的配置选项。\n\n[https://clang.llvm.org/docs/ClangFormatStyleOptions.html](https://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n\n个人的习惯是，使用以 LLVM 的风格为基础。\n\n```yaml .clang-format\nBasedOnStyle: LLVM\nIndentWidth: 4\nAccessModifierOffset: -4\n```\n\n根据自己需要设置即可。\n"},{"title":"用于 Visual Studio 2022 的 OpenCV 静态库","url":"/vs2022-opencv/","content":"\n当然了，使用 Python 或者其他方式，显然是更方便的选择。\n"},{"title":"关于 InfluxDB","url":"/influxdb/","content":"\n[https://www.influxdata.com/](https://www.influxdata.com/)\n\n[https://docs.influxdata.com/](https://docs.influxdata.com/)\n\n[https://docs.influxdata.com/influxdb/v2/](https://docs.influxdata.com/influxdb/v2/)\n\n# Install InfluxDB\n\n[https://docs.influxdata.com/influxdb/v2/install/](https://docs.influxdata.com/influxdb/v2/install/)\n\n## Linux\n\n[https://docs.influxdata.com/influxdb/v2/install/?t=Linux](https://docs.influxdata.com/influxdb/v2/install/?t=Linux)\n\nInstall InfluxDB as a service with systemd\n\n具体命令见上面的官方文档。\n\n相关的命令，根据需要，自行加上`sudo`。\n\nAPT 是全局性的包管理器，一般所有用户共享系统安装的软件包。对于 influxdb 同样如此，安装后，各个用户都能使用，只是各自有各自的配置文件，不会干扰。具体在后面会说。\n\n```bash\napt list --installed | grep influx\n```\n\n就日常使用感受来说，官方文档说的第 2 种安装方式较少用。\n\n查看服务状态。\n\n```bash\nsudo service influxdb status\n```\n\n如果要具体查看端口状态。端口号默认是`8086`。\n\n```bash\nsudo lsof -i :8086\n```\n\n如有需要。虽然个人感觉一般用不到。\n\n```bash\nsudo kill -9 <PID>\n```\n\n启动服务。\n\n```bash\nsudo service influxdb start\n```\n\n停止服务。\n\n```bash\nsudo service influxdb stop\n```\n\ninflux 安装后，默认是开机自启的，即使之前使用了`stop`，重启服务器或者 WSL 之类的之后会自己启动。如果想关闭自启动，可以使用这个。\n\n```bash\nsudo systemctl disable influxdb\n```\n\n## Windows\n\n[https://docs.influxdata.com/influxdb/v2/install/?t=Windows](https://docs.influxdata.com/influxdb/v2/install/?t=Windows)\n\n更建议使用 Scoop 安装。\n\n```powershell\nscoop install influxdb\nscoop install influx\n```\n\n# Get started with InfluxDB\n\n[https://docs.influxdata.com/influxdb/v2/get-started/](https://docs.influxdata.com/influxdb/v2/get-started/)\n\nUI 和 CLI 都是很方便的，建议都使用。\n\n`http://localhost:8086/`\n\n在 influxdb 运行的情况下。\n\n对于服务器也是可以的，如果只在用一个服务器，那么上面的地址就直接可以的，或者使用服务器的 IP 地址。\n\n## Set up InfluxDB\n\n[https://docs.influxdata.com/influxdb/v2/get-started/setup/](https://docs.influxdata.com/influxdb/v2/get-started/setup/)\n\n这里个人建议通过 CLI 命令行来设置。\n\n```shell\ninflux setup\n```\n\n按照提示，设置自己的 username，password，organization，bucket，等等内容。\n\n名字不要紧，后续都可以再修改的。\n\n# Develop with the InfluxDB API\n\n## Python client library\n\n```shell\npip install influxdb-client\n```\n\n还是很方便的。另外 java 也有相关库可以用。并且这些默认是使用 v2 版本。\n\n# Write data to InfluxDB\n\n[https://docs.influxdata.com/influxdb/v2/write-data/](https://docs.influxdata.com/influxdb/v2/write-data/)\n\n## Delete data\n\n[https://docs.influxdata.com/influxdb/v2/write-data/delete-data/](https://docs.influxdata.com/influxdb/v2/write-data/delete-data/)\n\n可以删除指定时间段的数据。\n\n# Administer InfluxDB\n\n[https://docs.influxdata.com/influxdb/v2/admin/](https://docs.influxdata.com/influxdb/v2/admin/)\n\n具体对于 organization，bucket，user，token 等的管理。包括添加，删除，查看，更新，等操作。\n\n另外也可以参考后文 reference 部分。\n\n## Manage organizations\n\n[https://docs.influxdata.com/influxdb/v2/admin/organizations/](https://docs.influxdata.com/influxdb/v2/admin/organizations/)\n\n### Update an organization\n\n[https://docs.influxdata.com/influxdb/v2/admin/organizations/update-org/](https://docs.influxdata.com/influxdb/v2/admin/organizations/update-org/)\n\n```shell\ninflux org update \\\n  --org-id ORG_ID \\\n  --name NEW_ORG_NAME \\\n```\n\n这样更新之后，配置文件的 org 并不会跟着更新，还是需要自己手动修改配置。\n\n## Manage buckets\n\n[https://docs.influxdata.com/influxdb/v2/admin/buckets/](https://docs.influxdata.com/influxdb/v2/admin/buckets/)\n\n个人建议是使用 CLI 来管理，UI 当然也行，主要看自己的使用习惯和方便程度。另外，对于这些，能直接修改就修改，能更新就更新，尽量少用删除相关的命令。\n\n## Manage API tokens\n\n[https://docs.influxdata.com/influxdb/v2/admin/tokens/](https://docs.influxdata.com/influxdb/v2/admin/tokens/)\n\n### View tokens\n\n[https://docs.influxdata.com/influxdb/v2/admin/tokens/view-tokens/](https://docs.influxdata.com/influxdb/v2/admin/tokens/view-tokens/)\n\n```shell\ninflux auth list\n```\n\n请善待自己的 token，好好利用，在配置文件里好好保管。这样就不用专门去记住自己的用户名，组织，等内容，即使忘记密码也可以重新设置。\n\n### Update a token\n\n[https://docs.influxdata.com/influxdb/v2/admin/tokens/update-tokens/](https://docs.influxdata.com/influxdb/v2/admin/tokens/update-tokens/)\n\n这里说的更新 token 指的是更新 token 的描述和状态等内容。\n\n假如自己真的不小心在 UI 或者 CLI 将自己唯一的 token 给删除 delete 了，那么就需要重新 setup 走一遍。先停止运行 influxdb 服务，删除数据文件，删除配置信息，然后重新运行 influxdb 服务。\n\n```bash\nsudo service influxdb stop\nsudo rm -rf /var/lib/influxdb\nrm -r ~/.influxdbv2/*\nsudo service influxdb start\ninflux setup\n```\n\n## Manage users\n\n[https://docs.influxdata.com/influxdb/v2/admin/users/](https://docs.influxdata.com/influxdb/v2/admin/users/)\n\n### View users\n\n[https://docs.influxdata.com/influxdb/v2/admin/users/view-users/](https://docs.influxdata.com/influxdb/v2/admin/users/view-users/)\n\n```shell\ninflux user list\n```\n\n### Change your password\n\n[https://docs.influxdata.com/influxdb/v2/admin/users/change-password/](https://docs.influxdata.com/influxdb/v2/admin/users/change-password/)\n\n用于修改用户的密码，或者说更新密码，重置密码。只要配置文件有 token 或者手动带上 token 参数。无需记住原先的密码。也常用于忘记密码的场景。\n\n```shell\ninflux user password \\\n  --name USERNAME \\\n  --password PASSWORD\n```\n\n# InfluxDB reference\n\n[https://docs.influxdata.com/influxdb/v2/reference/](https://docs.influxdata.com/influxdb/v2/reference/)\n\n## InfluxDB internals\n\n[https://docs.influxdata.com/influxdb/v2/reference/internals/](https://docs.influxdata.com/influxdb/v2/reference/internals/)\n\n### InfluxDB storage engine\n\n[https://docs.influxdata.com/influxdb/v2/reference/internals/storage-engine/](https://docs.influxdata.com/influxdb/v2/reference/internals/storage-engine/)\n\n数据文件存储相关。\n\n### InfluxDB file system layout\n\n[https://docs.influxdata.com/influxdb/v2/reference/internals/file-system-layout/](https://docs.influxdata.com/influxdb/v2/reference/internals/file-system-layout/)\n\nConfigs path\n\n`~/.influxdbv2/configs`\n\n在什么用户模式下`setup`的，配置文件就在什么用户目录下，这样就各自独立。特别地，在 root 模式下`setup`的，配置文件就在`/root/.influxdbv2/configs`。\n\n语法是 toml，默认的配置内容大致是这样的。从内容也可以看出，配置文件的一个很重要的作用就是保管自己的 token。\n\n```toml\n[default]\n  url = \"http://localhost:8086\"\n  token = \"<your-token>\"\n  org = \"<your-org>\"\n  active = true\n```\n\n这里的`org`是可选的，可以不写这一行，或者直接留空。当然，如果自己有多个 org，那么可以在这里指定默认的。\n\n如果默认只有一个，那么建议写上比较方便，这样比如`influx bucket list`的时候，不需要再去指定 org。只是如果自己后面要修改 org 的名字或者其他内容的时候，还得记得另外再修改这个配置里的内容。\n\n文档里面说 Installed as a package 方式的 Configs path 是`/var/lib/influxdb/configs`，不过一般不会这么安装，用处不大。\n\n位于`/etc/influxdb/config.toml`的配置文件，是 influxd configuration file，用于服务器的配置。\n\n```toml\nbolt-path = \"/var/lib/influxdb/influxd.bolt\"\nengine-path = \"/var/lib/influxdb/engine\"\n```\n\nEngine path\n\n`/var/lib/influxdb/engine/`\n\nTSM directories and files layout\n\n`/var/lib/influxdb/engine/data/`\n\n数据文件主要就是存这个地方。使用`du`命令查看总的大小。\n\n```bash\ndu -sh /var/lib/influxdb/\ndu -sh /var/lib/influxdb/engine/data/\ndu -sk /var/lib/influxdb/engine/data/\n```\n\nWAL directories and files layout\n\n`/var/lib/influxdb/engine/wal/`\n\n## Command line tools\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/](https://docs.influxdata.com/influxdb/v2/reference/cli/)\n\n其中`influxd`命令主要是服务器的配置，对于用户来说，一般较少用。\n\n### influx - InfluxDB command line interface\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/)\n\n#### influx setup\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/setup/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/setup/)\n\n#### influx auth\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/auth/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/auth/)\n\n#### influx config\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/config/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/config/)\n\n这里也说了，默认是将配置写在`~/.influxdbv2/configs`。\n\ninflux config set\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/config/set/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/config/set/)\n\n这里`set`和`update`同义。\n\n相关命令行的效果相当于直接修改该文件。\n\n用户的 token 也是放在此处，放这之后就不需要单独保存记忆，平时使用命令行也不需要每次都带上`--token`参数。\n\n#### influx user\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/user/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/user/)\n\n#### influx org\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/org/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/org/)\n\n#### influx bucket\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/bucket/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/bucket/)\n\n#### influx delete\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/delete/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/delete/)\n\n#### influx v1\n\n[https://docs.influxdata.com/influxdb/v2/reference/cli/influx/v1/](https://docs.influxdata.com/influxdb/v2/reference/cli/influx/v1/)\n\n```shell\ninflux v1 shell\n```\n\n可以用于使用 shell 模式。\n"},{"title":"关于 aqtinstall","url":"/aqtinstall/","content":"\n[https://aqtinstall.readthedocs.io/en/latest/](https://aqtinstall.readthedocs.io/en/latest/)\n\n用于方便地安装 Qt 版本。配合 Qt Creator 使用。\n\n# Installation\n\n[https://aqtinstall.readthedocs.io/en/latest/installation.html](https://aqtinstall.readthedocs.io/en/latest/installation.html)\n\n文档里介绍的是用 pip 安装的方法。如果是在 Windows 系统，这里更建议用 Scoop 安装使用，毕竟全局环境的 pip 里面一般还是少安装一些库比较好。\n\n```powershell\nscoop install aqtinstall\n```\n\n# Getting Started\n\n[https://aqtinstall.readthedocs.io/en/latest/getting_started.html](https://aqtinstall.readthedocs.io/en/latest/getting_started.html)\n\n先用`list-qt`命令，查看可用的 Qt 版本。\n\n```shell\naqt list-qt windows desktop\n```\n\n需要的参数包括主机，目标，等等。\n\n```shell\naqt list-qt windows desktop --arch 6.8.0\n```\n\n用于查看该版本所有可用的架构。\n\n```shell\naqt install-qt <host> <target> (<Qt version> | <spec>) [<arch>]\n```\n\naqt 安装 Qt 的位置，默认在命令行终端当前所在的目录。建议通过`--outputdir`参数指定安装位置，通常的做法是安装在 C 盘的`Qt`目录。\n\n```shell\naqt install-qt --outputdir c:\\Qt windows desktop 6.8.0 win64_mingw\n```\n\n要删除也很简单，直接删除相应文件夹就行。\n\n# Command Line Options\n\n[https://aqtinstall.readthedocs.io/en/latest/cli.html](https://aqtinstall.readthedocs.io/en/latest/cli.html)\n\n"},{"title":"日语接头词和接尾词","url":"/japanese-prefix-suffix/","content":"\n之前是按照词性，整理了一些接尾词。这里简单对于接头词和接尾词做一些阐述。\n\n接头词【接頭語】【接頭辞】和接尾词【接尾語】【接尾辞】，统称为接词【接辞】。\n\nweblio 有给出接头词和接尾词一览。大部分的接辞他是列出来了，有一些没有。\n\n[https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E8%BE%9E_1](https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E8%BE%9E_1)\n\n[https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E5%B0%BE%E8%AA%9E_1](https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E5%B0%BE%E8%AA%9E_1)\n\n[https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E9%A0%AD%E8%AA%9E_1](https://www.weblio.jp/parts-of-speech/%E6%8E%A5%E9%A0%AD%E8%AA%9E_1)\n\n可以看到，接头词和接尾词中，原本是名词的占了大多数。具体就不多说了。\n"},{"title":"日语连体词","url":"/japanese-rentaishi/","content":"\n能够在词典中明确标注为连体词【連体詞】的词条实际上十分有限，有些词该归类为连体词，还是说只是某个形容动词的连体形，在词典中尚存争议。\n\n连体词的概念可以自查。下面这篇文章对于连体词的分类，感觉还是可以的，内容讲的也比较清楚。\n\n[https://everjapan.com/japanese/pre-noun-adjectival/](https://everjapan.com/japanese/pre-noun-adjectival/)\n\n还有下面这篇。\n\n[https://zhuanlan.zhihu.com/p/487956848](https://zhuanlan.zhihu.com/p/487956848)\n\n日语 wiki 上的词条，讲的也比较清楚。\n\n能够成为连体词的，在日常生活使用中，可以简单认为他没有活用。而从这些词的来源上看，主要是相关的格助词，以及一些助动词、形容词、动词的连体形，等等，成为连体词的一部分之后，就基本固定了用法。有兴趣可以查查相关和概念。\n\n格助词【の】，格助词【が】，【形容動詞】，【ナリ活用】，【タリ活用】，助动词【なり】，助动词【たり】，助动词【だ】，助动词【た】，等等。\n\nweblio 有给出连体词一览，他是把连体词分为了两类：已知和未知。姑且作为参考。\n\n[https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E_1](https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E_1)\n\n[https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E%28%E6%97%A2%E7%9F%A5%29_1](https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E%28%E6%97%A2%E7%9F%A5%29_1)\n\n[https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E%28%E6%9C%AA%E7%9F%A5%29_1](https://www.weblio.jp/parts-of-speech/%E9%80%A3%E4%BD%93%E8%A9%9E%28%E6%9C%AA%E7%9F%A5%29_1)\n\n两类各自大概列了三十多个，应当说是大部分的连体词他是列出来了，有一些没有。\n"},{"title":"日语用于构成形容动词的词干的接尾词整理","url":"/japanese-adjectival-noun-suffix/","content":"\n依然是在 weblio 搜。这次搜的是`接尾 形容動詞の語幹をつくり`。总数不是很多。同样只是列出词条，具体内容还是自行查阅。\n\n这里没放进去け【気】，け【気】也可以作为接尾词，不过一般是构成名词。げ【気】算是け【気】的浊音化，げ【気】是用于构成形容动词的。\n\nげ【気】\n\nてき【的】\n\nら【等】\n\nたげ\n\nか\n\nはか\n\nやか\n\nらか\n"},{"title":"日语形容词型活用的接尾词整理","url":"/japanese-adjective-suffix/","content":"\n之前整理了关于动词型活用的接尾词。查了下好像形容词型活用的接尾词也不多，十来个，那就把这个也整理了。\n\n依然是在 weblio 全文检索，这次搜索的是`接尾］《形容詞型活用`，或者`接尾《形容詞型活用`之类的，差不多。\n\n网上资料找了一圈，目前也就这篇的整理比较合适。不过里面把构成形容动词的接尾词也算了进去。\n\n[https://zhuanlan.zhihu.com/p/99577257](https://zhuanlan.zhihu.com/p/99577257)\n\n还是那句话，由于精力所限，以下仅仅是列举，没给出具体的含义，来源，用例等内容。\n\n此处所列举的，不全都是用于构成形容词。\n\n> ［接尾］《形容詞型活用》動詞の連用形に付いて、…はずがない、…わけがない、の意を表す。\n\n里面有的接尾词，本身就是由多个接尾词构成的，比如がたない【難ない】就是由接尾词がたい【難い】的词干，加另一个接尾词ない组成的。当然了，含义和用法与がたい【難い】相同，接尾词ない用于强调这种性质，状态。具体内容依然是查词典。\n\nがたい【難い】\n\nがたない【難ない】\n\nがましい\n\nがわしい〔がはしい〕\n\nくさい【臭い】\n\nこい\n\nしい\n\nたい\n\nたらしい\n\nっこない\n\nっぽい\n\nづらい【辛い】\n\nない\n\nにくい【難い／悪い】\n\nぼったい\n\nめかしい\n\nらしい\n"},{"title":"德田的文化日记博客","url":"/bhjang3/","content":"\n[https://blog.naver.com/bhjang3](https://blog.naver.com/bhjang3)\n\n德 田 의 문 화 일 기.\n\n德田의 문화 일기\n\n德田의 文化 日記\n\n德田的文化日记\n\n内容很多，里面也有关于词源的资料。\n\n[https://blog.naver.com/bhjang3/221387962887](https://blog.naver.com/bhjang3/221387962887)\n"},{"title":"《新世纪日本语教程 初级》外来词整理","url":"/shinseiki-shokyuu-loanword/","content":"\n简单整理教材中的外来词【外来語】，方便考试复习。一些二外日语课的考试，会有专门的一题考察外来词的拼写。\n\n词条和原词以 weblio 大辞泉为准。外来词本身的写法和翻译以教材为准。\n\n有些外来词词组在 weblio 大辞泉没有，则只给出翻译，另起一行给出其中的单个外来词的词条，不另给翻译。\n\n对于外来词和非外来词组合而成的复合词【複合語】，另起一行给出其中的外来词的词条，不另给翻译。\n\n对于缩略词【略語】，如果词典释义给出的是原外来词，则另起一行给出该外来词的词条，不另给翻译。\n\n有些外来词有汉字表记，考虑到对于考试做题的帮助不大，甚至容易干扰，所以这里不给出，有兴趣可自查。\n\n# 3\n\nテニス【tennis】网球\n\nビデオ【video】录像机\n\nパス【pass】通过\n\nピアノ【piano】钢琴\n\nプラス【plus】加，正\n\nオペラ【(イタリア)opera】歌剧\n\nポスト【post】信箱\n\n# 4\n\nコップ【(オランダ)kop】玻璃杯\n\nデパート《「デパートメントストア」の略》百货商场\n\nデパートメントストア【department store】\n\nチャンス【chance】机会\n\n# 5\n\nコンピューター【computer】计算机\n\nサッカー【soccer】足球\n\nデジタル【digital】数字(式)\n\nカメラ【camera】照相机\n\nぺん【pen】钢笔\n\nけしゴム【消しゴム】橡皮\n\nゴム【(オランダ)gom】\n\nテーブル【table】餐桌\n\nでんきスタンド【電気スタンド】台灯\n\nスタンド【stand】\n\nジュース【juice】果汁\n\nパン【(ポルトガル)pão】面包\n\n# 6\n\nアメリカ【America】美国\n\n# 7\n\nスポーツ【sports】体育运动\n\nスキー【ski】滑雪\n\nオーエル【OL】《(和)office＋lady》白领丽人\n\nサラリーマン【salaried man／salaryman】工薪阶层\n\nコンサート【concert】音乐会\n\n# 8\n\nビル「ビルディング」の略。大楼\n\nビルディング【building】\n\nプール【pool】游泳池\n\nパソコン「パーソナルコンピューター」の略。个人电脑\n\nパーソナルコンピューター【personal computer】\n\nインターネット【Internet】因特网\n\n# 9\n\nジョギング【jogging】慢跑\n\nラジオ【radio】收音机\n\nアルバイト【(ドイツ)Arbeit】打工\n\nギター【guitar】吉他\n\n# 10\n\nコーヒー【coffee／(オランダ)koffie】咖啡\n\nミルク【milk】牛奶\n\nコート【coat】外套，大衣\n\nセーター【sweater】毛衣\n\nアナウンサー【announcer】播音员\n\nエムビーエー【MBA】《Master of Business Administration》MBA\n\n# 11\n\nロビー【lobby】门厅，前厅\n\nアパート《apartment houseの略》公寓\n\nレストラン【(フランス)restaurant】西餐馆\n\n# 12\n\nカップル【couple】情侣，夫妇\n\nハワイ【Hawaii】夏威夷\n\nヨーロッパ【(ポルトガル)Europa】欧洲\n\nホームステイ【homestay】住当地居民家体验生活\n\nビザ【visa】签证\n\nエイチエスケー 汉语水平考试\n\nチベット【Tibet】西藏\n\n# 13\n\nイーメール【e-mail／E-mail】电子邮件\n\nメッセージ【message】问候，口信\n\nアイティー【IT】《information technology》信息技术\n\nペットロボット 机器宠物\n\nペット【pet】\n\nクローン【clone】克隆\n\nロボット【robot】机器人\n\n# 14\n\nファーストフード【fast food】快餐\n\nハンバーガー【hamburger】汉堡包\n\nドラマ【drama】戏剧\n\nアニメ「アニメーション」の略。动画片\n\nアニメーション【animation】\n\nブイシーディー【VCD】《video CD》VCD\n\nバンジージャンプ【bungy jump】蹦极跳\n\nビール【(オランダ)bier】啤酒\n\n※ 对比第 8 课的ビル「ビルディング」の略\n\n# 15\n\nバレンタインデー【Valentine Day】情人节\n\nチョコレート【chocolate】巧克力\n\nぎりチョコ【義理チョコ】人情巧克力\n\nチョコ「チョコレート」の略。\n\nほんめいチョコ【本命チョコ】真情巧克力\n\nカード【card】卡片\n\nプレゼント【present】(名、他サ)礼品，礼物\n\nファン【fan】狂热爱好者\n\nピンポン【ping-pong】乒乓球\n\n# 16\n\nマナー【manner】礼节，礼貌\n\nドア【door】门\n\nプライバシー【privacy】个人隐私\n\nタバコ【(ポルトガル)tabaco】烟，香烟\n\nコーナー【corner】角，角落\n\nレポート【report】报告\n\n# 17\n\nスーパー【super】「スーパーマーケット」または「スーパーストア」の略。超市\n\nスーパーマーケット【supermarket】\n\nスーパーストア【superstore】\n\nカレー【curry】咖喱(饭)\n\nスイッチ【switch】开关\n\n# 18\n\nバー【bar】酒吧\n\nメニュー【(フランス)menu】菜单\n\n# 19\n\nヤッホー【yo-ho】(感)唷，啊哈\n\nコップ\n\n※ 在第 4 课中已出现\n\nシャツ【shirt】衬衫\n\n# 20\n\nトイレットペーパー【toilet paper】手纸\n\nマスター【master】(名、他サ)掌握\n\nマイカー《(和)my＋car》私车\n\n# 21\n\nネットワーク【network】网络\n\nテレビ《「テレビジョン」の略》电视机\n\nテレビジョン【television】\n\nリモコン「リモートコントロール」の略。遥控器\n\nリモートコントロール【remote control】\n\nでんしマネー【電子マネー】电子货币\n\nマネー【money】\n\nウイルス【(ラテン)virus】病毒\n\nアイビーエム【IBM】《International Business Machines Corporation》IBM(公司)\n\nクリスマスカード【Christmas card】圣诞卡\n\n# 22\n\nサウナ【(フィンランド)sauna】桑拿(浴)，蒸气浴\n\nバスケットボール【basketball】篮球\n\nバス【bus】公共汽车\n\n# 23\n\nコンビニ「コンビニエンスストア」の略。便利店\n\nコンビニエンスストア【convenience store】\n\nミニ【mini】迷你，小型\n\nスペース【space】空白，空间\n\n※ 可参考第 7 课的スポーツ【sports】一同记忆\n\nディーピーイー【DPE】(照片的)冲洗放大\n\nコピー【copy】(名、他サ)复制，拷贝\n\nでんしレンジ【電子レンジ】微波炉\n\nレンジ【range】\n\nサービス【service】(名、自サ)服务，招待\n\nアルバム【album】相册，纪念册\n\nケーキ【cake】西式糕点\n\n# 24\n\nニュース【news】新闻\n\n# 25\n\nクラス【class】班级，等级\n\nパーティー【party】聚会\n\nサラダ【salad／(フランス)・(オランダ)salade／(ポルトガル)salada】沙拉\n\nパスポート【passport】护照\n\nスカート【skirt】裙子\n\n※ 对比第 19 课的シャツ【shirt】记忆\n\nズボン《(フランス)jupon（ペチコートの意）からというが未詳》裤子\n\nハンカチ「ハンカチーフ」の略。手帕\n\nハンカチーフ【handkerchief】\n\nワイシャツ《「ホワイトシャツ（white shirt）」から》衬衫\n\nネクタイ【necktie】领带\n\n# 26\n\nマイホーム《(和)my＋home》私房，私宅\n\nライフスタイル【lifestyle】生活模式\n\nスリッパ【slipper】拖鞋\n\nマンション【mansion】高级公寓\n\nフランス【France】法国\n\n# 27\n\nドイツ【Deutschland】《(オランダ)Duitsから》德国\n\nドライブ【drive】(名、自サ)兜风\n\nイタリア【Italia】意大利\n\nスイス【Suisse】瑞士\n\nユーモア【humor】幽默\n\n# 28\n\nイーメール\n\n※ 在第 13 课中已出现\n\nカラオケ 卡拉OK\n\nからオケ【空オケ】《「オケ」は「オーケストラ」の略。「カラオケ」と書くことが多い》\n\nオーケストラ【orchestra】\n\nダンス【dance】跳舞\n\nトランプ【trump】纸牌\n\n# 29\n\nエンジントラブル 引擎故障\n\nエンジン【engine】\n\nトラブル【trouble】\n\nキロ【(フランス)kilo】公里\n\nテスト【test】考试\n\nスピーチコンテスト 演讲比赛\n\nスピーチ【speech】\n\nコンテスト【contest】\n\nレコード【record】唱片\n\nウォークマン【Walkman】随身听\n\nテープレコーダー【tape recorder】收录机\n\nワープロ「ワードプロセッサー」の略。文字处理机\n\nワードプロセッサー【word processor】\n\nポケットベル【pocket bell】寻呼机\n\n# 30\n\nデータベース【database】数据库\n\nページ【page】页，张\n\nシーディーロム【CD-ROM】《compact disc read only memory》光盘\n\nキーボード【keyboard】键盘\n\nチャット【chat】聊天\n\nソフトウェア【software】软件\n\nサイト【site】网站\n\nダウンロード【download】下载\n\nメールアドレス【mail address】电子邮件地址\n"},{"title":"日语动词型活用的接尾词整理","url":"/japanese-verb-suffix/","content":"\n关于接尾词【接尾語】【接尾辞】的定义，此处不赘述，请自行查阅资料。\n\n就网上查资料的过程来看，很多文章经常把动词型活用的接尾词，粗糙地认为是复合动词【複合動詞】的后面那部分，或者是认为是补助动词，辅助动词【補助動詞】，之类的。这是不合适的。\n\n看了一圈下来，基本也就下面这篇文章列举的词符合定义。\n\n[https://zhuanlan.zhihu.com/p/99366985](https://zhuanlan.zhihu.com/p/99366985)\n\n我还是简单举个例子。比如动词あきめく【秋めく】中的めく，就是个动词五段型活用的接尾词，表示变成那种状态或者表现出类似的样子。具体内容还是查词典。\n\n通过在 weblio 全文检索，在《大辞泉》共查到二十多个。具体来说，搜索`接尾《動詞 型活用`得到的内容比较精确。\n\n由于精力所限，以下仅仅是列举，并没具体给出含义、来源、词例等内容，请自行查阅《大辞泉》或其他词典进行查看。\n\nかす\n\nがる\n\nぐむ\n\nこかす【転かす／倒かす】\n\nこける\n\nごつ\n\nさす【止す】\n\nさびる\n\nじみる【染みる】\n\nだつ\n\nちぎる【千切る】\n\nつく\n\nづく【付く】\n\nづける【付ける／附ける】\n\nなう〔なふ〕\n\nばむ\n\nばる【張る】\n\nびる\n\nふ\n\nぶる【振る】\n\nめかす\n\nめく\n\nやく\n\nやぐ\n\nわう〔はふ〕\n"},{"title":"日语口语由サ变动词上一段化的动词","url":"/japanese-verb-colloquialism-kamiichidan-sa/","content":"\n[口语上一段活用](/japanese-verb-colloquialism-kamiichidan)\n\n这也是サ行上一段活用的动词的来源，和ザ行上一段活用的动词的主要来源。\n\nweblio 全文搜索`動サ上一`和`動ザ上一`。\n\n给出 weblio サ行上一段活用的动词一览。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%B5%E8%A1%8C%E4%B8%8A%E4%B8%80%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%B5%E8%A1%8C%E4%B8%8A%E4%B8%80%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n另给出 weblio ザ行上一段活用的动词一览。可能有些缺漏。而且里面有一些是来自文语的ダ行上二段活用。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%B6%E8%A1%8C%E4%B8%8A%E4%B8%80%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%B6%E8%A1%8C%E4%B8%8A%E4%B8%80%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n最早接触的这类动词，可能就是しんじる【信じる】还有かんじる【感じる】了。或许可以注意到这两个的汉字音都是拨音结尾，这个在后面会说。\n\n# 变成サ行上一段活用\n\n先给出上一段化之后变成サ行上一段活用的动词。这几个都是 t 韵尾的汉字，而且变成了促音。\n\n《大辞泉》里有的就 2 个。\n\nけっしる【結しる】\n\nさっしる【察しる】\n\n而在 weblio 一览中，另给了 2 个。\n\nたっしる【達しる】\n\nせっしる【接しる】\n\n# 变成ザ行上一段活用\n\n再给出上一段化之后变成ザ行上一段活用的动词。可以简单分为两类。\n\n一类是汉字音加上じる。符合条件的汉字主要是这几类：m 韵尾，n 韵尾，ng 韵尾，u 韵尾。反映在汉字音中就是：拨音，长音。\n\n一类是和语词的拨音便【撥音便】。要么是助词に的音便，要么是形容词变成表状态的名词所用的接尾词み的音便。\n\n最后还有几个复合动词，都是由前一类组成的复合动词。\n\n## 汉字音\n\nあんじる【按じる】\n\nあんじる【案じる】\n\nえいじる【映じる】\n\nえいじる【詠じる】\n\nえんじる【怨じる】\n\nえんじる【演じる】\n\nおうじる【応じる】\n\nかんじる【感じる】\n\nかんじる【観じる】\n\nきょうじる【興じる】\n\nきんじる【禁じる】\n\nぎんじる【吟じる】\n\nくんじる【薫じる】\n\nけんじる【献じる】\n\nげんじる【減じる】\n\nげんじる【現じる】\n\nこうじる【困じる】\n\nこうじる【講じる】\n\nこうじる【高じる／嵩じる／昂じる】\n\nこんじる【混じる】\n\nさんじる【参じる】\n\nさんじる【散じる】\n\nじゅんじる【殉じる】\n\nじゅんじる【準じる／准じる】\n\nしょうじる【招じる】\n\nしょうじる【生じる】\n\nじょうじる【乗じる】\n\nしょうじる【請じる】\n\nしんじる【信じる】\n\nしんじる【進じる】\n\nせんじる【煎じる】\n\nそんじる【損じる】\n\nぞんじる【存じる】\n\nたんじる【嘆じる／歎じる】\n\nだんじる【談じる】\n\nだんじる【断じる】\n\nだんじる【弾じる】\n\nちょうじる【長じる】\n\nちんじる【陳じる】\n\nつうじる【通じる】\n\nてんじる【点じる】\n\nてんじる【転じる】\n\nとうじる【投じる】\n\nどうじる【動じる】\n\nどうじる【同じる】\n\nなんじる【難じる】\n\nにんじる【任じる】\n\nねんじる【念じる】\n\nはんじる【判じる】\n\nふうじる【封じる】\n\nへんじる【変じる】\n\nべんじる【便じる】\n\nべんじる【弁じる／辨じる】\n\nべんじる【弁じる／辯じる】\n\nほうじる【崩じる】\n\nほうじる【焙じる】\n\nほうじる【報じる】\n\nほうじる【奉じる】\n\nまんじる【慢じる】\n\nめいじる【銘じる】\n\nめいじる【命じる】\n\nめんじる【免じる】\n\nろんじる【論じる】\n\n这里，こうじる【困じる】的「困」发生了音变。\n\n单列出几个比较特殊的动词。\n\nごろうじる【御覧じる】\n\n这里「覧」发生了音变。\n\nたいじる【退治る】\n\n> 《名詞「たいじ（退治）」の動詞化》\n\n## 拨音便\n\nあまんじる【甘んじる】\n\nうとんじる【疎んじる】\n\nおもんじる【重んじる】\n\nがえんじる【肯んじる】\n\nかろんじる【軽んじる】\n\nさきんじる【先んじる】\n\nそらんじる【諳んじる】\n\nやすんじる【安んじる】\n\n## 复合动词\n\nはせさんじる【馳せ参じる】\n\nうけそんじる【受（け）損じる】\n\nかきそんじる【書（き）損じる】\n\nしそんじる【仕損じる／為損じる】\n\nみそんじる【見損じる】\n\nやりそんじる【遣り損じる】\n\nあいつうじる【相通じる】\n\n"},{"title":"日语口语上一段活用的动词","url":"/japanese-verb-colloquialism-kamiichidan/","content":"\n类似于上二段活用的情况，口语上一段活用的动词，实际上比下一段活用的动词要少很多。\n\n口语上一段活用的动词，分布在ア行，カ行，ガ行，ザ行，タ行，ナ行，バ行，マ行，ラ行。另外还有サ行。\n\n网上很多资料好像没提到サ行，虽然实际上也就几个。サ行上一段活用，主要来源是サ变动词的上一段化。《大辞泉》里有的就 2 个：けっしる【結しる】，さっしる【察しる】。而在 weblio 一览中，另给了 2 个：せっしる【接しる】，たっしる【達しる】。可以看到这几个都是 t 韵尾的汉字，而且变成了促音。\n\nア行上一段活用，主要来源是文语的ワ行上一段活用，ハ行上二段活用，ヤ行上二段活用。\n\nカ行上一段活用，主要来源是文语的カ行上一段活用，カ行上二段活用。\n\nガ行上一段活用，主要来源是文语的ガ行上二段活用。\n\nザ行上一段活用，主要来源是サ变动词连浊的上一段化，另外就是文语的ダ行上二段活用，文语ザ行上二段活用。\n\nタ行上一段活用，主要来源是文语的タ行上二段活用。\n\nナ行上一段活用，主要来源是文语的ナ行上一段活用。\n\nバ行上一段活用，主要来源是文语的バ行上二段活用。\n\nマ行上一段活用，主要来源是文语的マ行上一段活用，マ行上二段活用。\n\nラ行上一段活用，主要来源是文语的ラ行上二段活用。\n\n文语上一段活用的动词，之前有文章写过。文语上二段活用的动词，按照不同的行，分别写了文章整理。可以参考下面这几篇。\n\n[文语上一段活用](japanese-verb-literary-kamiichidan)\n\n[文语上二段活用](japanese-verb-kaminidan)\n"},{"title":"使用「屎婆屎婆/💩👵💩👵」作为しばしば的借字，兼论「屡」和「屢」","url":"/shibashiba/","content":"\n致谢：屎女 bot 是由 [Ishisashi](https://github.com/mrhso) 老师写的 bot，主要功能是组字。非常感谢！\n\n「屡」拆成「屎女」，し和ば又能对应「屎」和「婆」的音读，「屎婆屎婆」作为借字【当て字】非常合适。迫真。\n\n关于「屡」和「屢」，该字在《常用汉字表》外，汉字检定是将后者作为标准字体【標準字体】，前者作为异体字，容许字体【許容字体】。\n\n[https://www.kanjipedia.jp/kanji/0007223600](https://www.kanjipedia.jp/kanji/0007223600)\n\n在 weblio デジタル大辞泉，相关词条和内容是使用前者。\n\n下面是 ruby 示例。\n\n<ruby>💩<rt>し</rt>👵<rt>ば</rt>💩<rt>し</rt>👵<rt>ば</rt></ruby>\n\n<ruby>屎<rt>し</rt>婆<rt>ば</rt>屎<rt>し</rt>婆<rt>ば</rt></ruby>\n\n<ruby>屎<rt>し</rt>女<rt>ば</rt>屎<rt>し</rt>女<rt>ば</rt></ruby>\n\n<ruby>屡<rt>しば</rt>屡<rt>しば</rt></ruby>\n\n<ruby>屡<rt>しばしば</rt></ruby>\n\n<ruby>屢<rt>しば</rt>屢<rt>しば</rt></ruby>\n\n<ruby>屢<rt>しばしば</rt></ruby>\n\n参考 html 写法。\n\n```html\n<ruby>💩<rt>し</rt>👵<rt>ば</rt>💩<rt>し</rt>👵<rt>ば</rt></ruby>\n<ruby>屎<rt>し</rt>婆<rt>ば</rt>屎<rt>し</rt>婆<rt>ば</rt></ruby>\n<ruby>屎<rt>し</rt>女<rt>ば</rt>屎<rt>し</rt>女<rt>ば</rt></ruby>\n<ruby>屡<rt>しば</rt>屡<rt>しば</rt></ruby>\n<ruby>屡<rt>しばしば</rt></ruby>\n<ruby>屢<rt>しば</rt>屢<rt>しば</rt></ruby>\n<ruby>屢<rt>しばしば</rt></ruby>\n\n<ruby>💩👵💩👵<rt>しばしば</rt></ruby>\n<ruby>屎婆屎婆<rt>しばしば</rt></ruby>\n<ruby>屎女屎女<rt>しばしば</rt></ruby>\n<ruby>屡屡<rt>しばしば</rt></ruby>\n<ruby>屢屢<rt>しばしば</rt></ruby>\n```\n\n纯为娱乐。\n"},{"title":"日语文语上二段活用的动词","url":"/japanese-verb-kaminidan/","content":"\n相比于下二段活用，上二段活用的动词少很多。可以参看这篇的解释。\n\n[https://www.zhihu.com/question/654184648](https://www.zhihu.com/question/654184648)\n\n上二段活用的动词，分布在カ行，ガ行，タ行，ダ行，ハ行，バ行，マ行，ヤ行，ラ行，还有ワ行。另外还有ザ行。\n\n网上很多资料好像没提到ワ行，虽然实际上就一个：う【居／坐】，并且在中古就上一段化了。\n\nザ行也是，一般的资料基本不会提到。好像只有一个：こず【抉ず】，另一个是ねこず【根掘ず】，但是《大辞泉》对于他的活用是四段还是上二段不太确定。\n\n这里面除了バ行有数十个，其他行在不考虑复合动词的情况下，数量基本是十个以内。即使算上了复合动词，最多就是十几个或者几十个的量级，都可以比较方便地列举出来。\n\nバ行的看起来比较多的一个原因是，里面有相当一部分是使用了接尾词びる，文语ぶ上二段型活用，接尾词さびる，文语さぶ上二段型活用。除去这些，基本的动词也就是三十个左右。\n\n在 weblio 里面其实有列出，还是比较全的，但还是有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n已经整理了这些动词，按行分别写在之前的文章中。\n\n[カ行](/japanese-verb-kaminidan-ka)\n\n[ガ行](/japanese-verb-kaminidan-ga)\n\n[ザ行](/japanese-verb-kaminidan-za)\n\n[タ行](/japanese-verb-kaminidan-ta)\n\n[ダ行](/japanese-verb-kaminidan-da)\n\n[ハ行](/japanese-verb-kaminidan-ha)\n\n[バ行](/japanese-verb-kaminidan-ba)\n\n[マ行](/japanese-verb-kaminidan-ma)\n\n[ヤ行](/japanese-verb-kaminidan-ya)\n\n[ラ行](/japanese-verb-kaminidan-ra)\n\n[ワ行](/japanese-verb-kaminidan-wa)\n\n在 weblio 通过全文检索的方式就行。比如，对于カ行，搜`カ上二`。\n"},{"title":"日语文语ワ行下二段活用的动词整理","url":"/japanese-verb-shimonidan-wa/","content":"\nweblio 全文搜索`ワ下二`。\n\nうう【植う】\n\nうう【飢う】\n\nかつう【餓う／飢う】\n\nくう【蹴う】\n\nすう【据う】\n\n其中，关于くう【蹴う】，之前在说ける【蹴る】的时候有简单提过。\n\n[補説] 「馬の子や牛の子にくゑさせてん」〈梁塵秘抄・二〉、「蹴 化ル」〈類聚名義抄〉などの例から、平安末期には下二段活用が下一段化していたかと思われる。また、同じ下一段活用でもクヮ行下一段「く𛅑る」で、のちに直音化して「ける」になり、カ行下一段となったとする説もある。\n\n中间那个字符如果没显示出来，那个是小的ゑ，U+1B151。\n\n以下的复合动词，基本上仅用于文语。\n\nほりうう【掘り植う】\n\nかきすう【舁き据う】\n\nしすう【為据う】\n\nついすう【つい据う】\n\nとりすう【取り据う】\n\nなめすう【並め据う】\n\nゆりすう【揺り据う】\n\nよびすう【呼び据う】\n\n口语形。\n\nうえる【植える】\n\nうえる【飢える／餓える／饑える】\n\nかつえる【餓える／飢える】\n\nすえる【据える】\n\n以下的复合动词有相应的文语形。\n\nうちすえる【打（ち）据える】\n\nつきすえる【突（き）据える】\n\nにらみすえる【睨み据える】\n\nひきすえる【引（き）据える】\n\nみすえる【見据える】\n"},{"title":"日语文语カ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ka/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`カ上二`。\n\n给出 weblio カ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%AB%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%AB%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nいく【生く】\n\n> いく【生く】还可以是四段活用，カ行下二段活用。\n\nおく【起く】\n\nおく【熾く】\n\nつく【尽く】\n\nよく【避く】\n\n> よく【避く】还可以是四段活用，カ行下二段活用。さく【避く】是カ行下二段活用。\n\n以下的复合动词，基本上仅用于文语。\n\nねおく【寝起く】\n\n口语形。\n\nいきる【生きる】「活きる」\n\nおきる【起きる】\n\nおきる【熾きる】\n\nつきる【尽きる／竭きる】\n\n以下的复合动词有相应的文语形。\n\nとびおきる【飛（び）起きる】\n\nはねおきる【跳ね起きる】\n\nもえつきる【燃（え）尽きる】\n"},{"title":"韩语词语的词源，国语史文献名缩写","url":"/korean-etym-works/","content":"\n查词的时候可能遇到。\n\n比较方便的方法是，在韩国国立国语院的우리말샘查该词，将鼠标悬停在相应的文献名缩写上，可以看到文献的全名。\n\n另外，在 wiktionary 上查该词，在词源部分，可能可以看到相应的文献著作名。\n\n在 wiktionary 的附录页面「부록:한국어사 문헌 약호」，整理了词典中使用的文献的简写。\n\nwiktionary 的模板页面 Template:Ko-etym-native，模块页面 Module:Ko-etym，列出了文献著作以及速记名称，可以对照着查询。\n"},{"title":"日语文语ハ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ha/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ハ上二`。\n\n给出 weblio ハ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%8F%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%8F%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nうれふ【憂ふ／愁ふ／患ふ】\n\nおふ【生ふ】\n\nくふ【悔ふ】\n\n> 《「くゆ」の音変化》\n\nこふ【恋う】\n\n> [補説] 古くは上二段であるが、中世末期ごろから「千々のあはれは妻こふ鹿の音」〈松の葉・三〉のように四段に活用する例が見られる。また、現代でも「この祖母を恋いる事を忘れて」〈三重吉・小鳥の巣〉のように上一段に活用する例がまれに見られる。\n\nしふ【強ふ】\n\nしふ【誣ふ】\n\nしふ【癈ふ】\n\nはなふ【嚔ふ】\n\n> 后来是上一段化了。\n\nふ【干／乾】\n\n> [補説] 上代では、未然形・連用形に乙類の仮名が用いられているので、上二段活用であったと考えられる。平安時代以降は上一段化する。\n\nもちふ【用ふ】\n\n> 《ワ行上一段動詞「もちゐる」の転じたもの》\n\n以下的复合动词，基本上仅用于文语。\n\nうらこふ【心恋ふ】\n\nおもひこふ【思ひ恋ふ】\n\n口语形。\n\nしいる【強いる】\n\nしいる【癈いる】\n\nしいる【誣いる】\n\nこいる【恋いる】\n\n复合动词。\n\nめしいる【盲いる】\n\n> 目(め)癈(し)いる。\n"},{"title":"日语文语ヤ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ya/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ヤ上二`。\n\n给出 weblio ヤ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%A4%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%A4%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nおゆ【老ゆ】\n\nくゆ【悔ゆ】\n\nこゆ【凍ゆ】\n\nこゆ【臥ゆ】\n\nむくゆ【報ゆ／酬ゆ】\n\n此外，还有几个是文语上一段活用的上二段化，单独列出。\n\nひきゆ【率ゆ】\n\n> 「ひき（率）いる」（上一）の上二段化。\n\nもちゆ【用ゆ】\n\n> 《「もち（用）いる」が中世以降ヤ行に転じて用いられた語。終止形は「用ゆる」となる例が多い》\n\n以下的复合动词，基本上仅用于文语。\n\nなまおゆ【生老ゆ】\n\n口语形。\n\nおいる【老いる】\n\nくいる【悔いる】\n\nむくいる【報いる／酬いる】\n\n关于こゆ【凍ゆ】的情况。口语こごえる【凍える】的文语形是こごゆ【凍ゆ】，是ヤ行下二段活用。《大辞泉》中，こゆ【凍ゆ】词条的解释就是こごえる。こゆ应该算是变体。\n\n以下的复合动词有相应的文语形。\n\nとしおいる【年老いる】\n"},{"title":"日语文语マ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ma/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`マ上二`。\n\n给出 weblio マ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%9E%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%9E%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nあむ【浴む】\n\nうらむ【恨む／怨む／憾む】\n\nかみしむ【神しむ】\n\n> 「かむさぶ」に同じ。\n\nかむしむ【神しむ】\n\n> 「かむさぶ」に同じ。\n\nかんがむ【鑑む／鑒む】\n\n> 「かんがみる」（上一）の上二段化。\n\nこころむ【試む】\n\n> 《「こころみる」の上二段化。平安末期から現れる》\n\nしむ【凍む】\n\nしむ【染む／沁む／浸む／滲む】\n\n> 也可以是四段活用，下二段活用。\n\nたむ【回む／廻む／迂む】\n\nとどむ【止む／留む／停む】\n\n> 也可以是下二段活用。\n\nゆめむ【夢む】\n\n> 「夢見る」に同じ。\n\n以下的复合动词，基本上仅用于文语。\n\nこぎたむ【漕ぎ回む】\n\n口语形。\n\nしみる【凍みる】\n\nしみる【染みる／沁みる／浸みる／滲みる】\n\n以下的复合动词有相应的文语形。\n\nあせじみる【汗染みる】\n\nあぶらじみる【油染みる】\n\n以下的复合动词，在《大辞泉》中似乎没有列出相应的文语形，但这些的文语形应该是上二段活用，而不是上一段活用。基本都是使用了接尾词じみる【染みる】。\n\nあかじみる【垢染みる】\n\nいなかじみる【田舎染みる】\n\nおとなじみる【大人染みる】\n\nきちがいじみる【気違い染みる】\n\nこどもじみる【子供染みる】\n\nしばいじみる【芝居染みる】\n\nとしよりじみる【年寄り染みる】\n"},{"title":"日语文语バ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ba/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`バ上二`。\n\n给出 weblio バ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%90%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%90%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nバ行应该是上二段活用的动词中，数量最多的，甚至比バ行下二段活用的都要多一些。\n\n一个原因大概是，一些词是使用了接尾词びる，文语ぶ上二段型活用，接尾词さびる，文语さぶ上二段型活用。\n\n# 总览\n\nあぶ【浴ぶ】\n\nおぶ【帯ぶ】\n\n> 这个也可以是四段活用。\n\nかぶ【黴ぶ】\n\nからぶ【乾ぶ／涸ぶ／嗄ぶ／枯らぶ】\n\nくしぶ【霊ぶ／奇ぶ】\n\nこぶ\n\nこぶ【媚ぶ】\n\nさぶ【寂ぶ】\n\nさぶ【荒ぶ】\n\n> 《上代は上二段活用であるが、平安時代ころから四段にも活用するようになった》\n\nさぶ【錆ぶ／銹ぶ】\n\nしなぶ【萎ぶ】\n\nしのぶ【忍ぶ】\n\n> 《上代は上二段活用。平安時代になって「偲(しの)ぶ」と混同し、四段にも活用》\n\nしのぶ【偲ぶ】\n\n> 《上代は「しのふ」で、ハ行四段活用。平安時代になって、「忍ぶ」（本来は上二段活用）と混同して「しのぶ」となり、上二段にも活用》\n\nすさぶ【荒ぶ／進ぶ／遊ぶ】\n\nちぶ【禿ぶ】\n\nつぶ【禿ぶ】\n\nなよぶ\n\nにきぶ【和ぶ】\n\nにぶ【鈍ぶ】\n\nねぶ\n\nのぶ【伸ぶ／延ぶ】\n\nふくろぶ【綻ぶ】\n\n> 这个也可以是四段活用。\n\nほとぶ【潤ぶ】\n\nほころぶ【綻ぶ】\n\n> 这个也可以是四段活用。\n\nほろぶ【滅ぶ／亡ぶ】\n\n> 这个也可以是四段活用。\n\nまなぶ【学ぶ】\n\n> 这个也可以是四段活用。\n\nみやぶ【雅ぶ】\n\nむつぶ【睦ぶ】\n\nよろこぶ【喜ぶ／悦ぶ／歓ぶ／慶ぶ】\n\n> 这个也可以是四段活用。\n\nわぶ【侘ぶ】\n\nわぶ【詫ぶ】\n\n# 以ぶ作为接尾词\n\nあてぶ【貴ぶ】\n\nあはれぶ【哀れぶ／憐れぶ】\n\n> [補説] もとは上二段活用で、その後多く四段活用に変化して用いられたものか。\n\nあらぶ【荒ぶ】\n\nいなぶ【否ぶ／辞ぶ】\n\nうつくしぶ【慈しぶ／愛しぶ】\n\nうれしぶ【嬉しぶ】\n\nおきなぶ【翁ぶ】\n\nかなしぶ【悲しぶ／哀しぶ／愛しぶ】\n\nかむぶ【神ぶ】\n\nかろぶ【軽ぶ】\n\nけそうぶ【懸想ぶ】\n\nことさらぶ【殊更ぶ】\n\nことなしぶ【事無しぶ】\n\nさとぶ【俚ぶ／里ぶ】\n\nすずろぶ【漫ろぶ】\n\nたかぶ【高ぶ】\n\nたけぶ【猛ぶ／建ぶ／誥ぶ】\n\nたふとぶ【尊ぶ／貴ぶ】\n\n（也可以是四段活用）\n\nちはやぶ【千早ぶ】\n\nともしぶ【乏しぶ／羨しぶ】\n\nなさけぶ【情けぶ】\n\nはかなぶ【果無ぶ】\n\nふるぶ【古ぶ／旧ぶ】\n\nむかしぶ【昔ぶ】\n\nやまざとぶ【山里ぶ】\n\nゆゑぶ【故ぶ】\n\nわかぶ【若ぶ】\n\nわろぶ【悪ぶ】\n\nをんなぶ【女ぶ】\n\nをさなぶ【幼ぶ】\n\n# 以さぶ作为接尾词\n\nあきさぶ【秋さぶ】\n\nかみさぶ【神さぶ】\n\nかむさぶ【神さぶ】\n\nしみさぶ【茂みさぶ】\n\nやまさぶ【山さぶ】\n\n# 其他仅用于文语的复合动词\n\n以下的复合动词，基本上仅用于文语。\n\nうらさぶ【心荒ぶ】\n\nひきしのぶ【引き忍ぶ】\n\nおきわぶ【起き侘ぶ】\n\nさきすさぶ【咲き荒ぶ】\n\nおもひむつぶ【思ひ睦ぶ】\n\nなれむつぶ【馴れ睦ぶ】\n\nありわぶ【在り侘ぶ】\n\nいひわぶ【言ひ侘ぶ】\n\nうらみわぶ【恨み侘ぶ】\n\nおもひわぶ【思ひ侘ぶ】\n\nこひわぶ【恋ひ侘ぶ】\n\nきえわぶ【消え侘ぶ】\n\nしわぶ【為侘ぶ】\n\nせきわぶ【塞き侘ぶ／堰き侘ぶ】\n\nたづねわぶ【尋ね侘ぶ】\n\nながめわぶ【眺め侘ぶ】\n\nなきわぶ【泣き侘ぶ】\n\nなげきわぶ【嘆き侘ぶ】\n\n这里的ひきしのぶ【引き忍ぶ】也可以是四段活用。\n\n# 口语形\n\nあびる【浴びる】\n\nおきなさびる【翁さびる】\n\nおさなびる【幼びる】\n\nおとなびる【大人びる】\n\nおびる【帯びる】「佩びる」\n\nかびる【黴びる】\n\nかみさびる【神さびる】\n\nからびる【乾びる／涸びる／嗄びる／枯らびる】\n\nかんさびる【神さびる】\n\nこびる【媚びる】\n\nさびる【寂びる】\n\nさびる【錆びる／銹びる】\n\nしなびる【萎びる】\n\nしわびる【皺びる】\n\nすすびる【煤びる】\n\nちびる【禿びる】\n\nのびる【伸びる／延びる】\n\nひなびる【鄙びる】\n\nふるびる【古びる／旧びる】\n\nほころびる【綻びる】\n\nほとびる【潤びる】\n\nほろびる【滅びる／亡びる】\n\nみやこびる【都びる】\n\nみやびる【雅びる】\n\nわびる【詫びる】\n\nわびる【侘びる】\n\n以下的复合动词有相应的文语形。\n\nいなかびる【田舎びる】\n\nいきのびる【生（き）延びる】\n\nおちのびる【落（ち）延びる】\n\nにげのびる【逃（げ）延びる】\n\nすみわびる【住み侘びる】\n\nまちわびる【待ち侘びる】\n\nものさびる【物寂びる】\n\nひからびる【干涸びる／乾涸びる】\n"},{"title":"日语文语ダ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-da/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ダ上二`。\n\n给出 weblio ダ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%80%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%80%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\nおづ【怖づ】\n\nしこづ【讒づ／譖づ】\n\nとづ【綴づ】\n\nとづ【閉づ】\n\nねづ【捩づ／捻づ／拗づ】\n\nはづ【恥づ】\n\nもみづ【紅葉づ／黄葉づ】\n\n> 《四段動詞「もみつ」の変化した語》\n\nよづ【攀づ】\n\n以下的复合动词，基本上仅用于文语。\n\nしたがひおづ【従ひ怖づ】\n\nひきよづ【引き攀づ】\n\n口语形。\n\nおじる【怖じる】\n\nとじる【綴じる】\n\nとじる【閉じる】\n\nねじる【捩じる／捻じる／拗じる】\n\nはじる【恥じる／羞じる／慙じる／愧じる】\n\nよじる【攀じる】\n"},{"title":"日语文语タ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ta/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`タ上二`。\n\n给出 weblio タ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%BF%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%BF%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n最早接触的タ行上一段活用的动词，应该主要就是おちる【落ちる】和みちる【満ちる】之类的吧，实际上确实没几个。\n\nおつ【落つ／堕つ／墜つ】\n\nくつ【朽つ】\n\nそぼつ【濡つ】\n\n> [補説] 現代では「濡れそぼつ」などの形で文章語としてのみ用いられる。また、【一】2は、連用形の用例しかないので、活用は上二か四段か判定しがたい。\n\nひつ【漬つ／沾つ】\n\n> [補説] 四段活用から上二段活用になったのは平安中期といわれる。\n\nみつ【満つ／充つ】\n\n> [補説] 【一】は中世以降、「耳にみつる物は鳴り下る雷(いかづち)の音」〈盛衰記・七〉のように上二段にも活用し、更に上二段活用は上一段活用「みちる」に変化し、現在にいたる。また【三】は、下一段化せずに衰え、かわって「みたす」が用いられるようになった。\n\nをつ【復つ／変若つ】\n\n口语形。\n\nおちる【落ちる／堕ちる／墜ちる】\n\nくちる【朽ちる】\n\nみちる【満ちる／充ちる】\n\n以下的复合动词有相应的文语形。\n\nうまれおちる【生（ま）れ落ちる】\n\nかれおちる【枯れ落ちる】\n\nくずれおちる【崩れ落ちる】\n\nこぼれおちる【零れ落ちる】【溢れ落ちる】【翻れ落ちる】\n\nころがりおちる【転がり落ちる】\n\nころげおちる【転げ落ちる】\n\nしたたりおちる【滴り落ちる】【瀝り落ちる】\n\nすべりおちる【滑り落ちる】\n\nずりおちる【ずり落ちる】\n\nながれおちる【流れ落ちる】\n\nなだれおちる【雪崩落ちる／傾れ落ちる】\n\nにげおちる【逃（げ）落ちる】\n\nぬけおちる【抜け落ちる】\n\nはげおちる【剝げ落ちる】\n\nまいおちる【舞（い）落ちる】\n\nやけおちる【焼け落ちる】\n\nおいくちる【老（い）朽ちる】\n"},{"title":"日语文语ガ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ga/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ガ上二`。\n\n给出 weblio ガ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%AC%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%AC%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n最早接触的ガ行上一段活用的动词，应该就是すぎる【過ぎる】了吧，结果在口语里也就只有他了，其他复合动词也是由他构成的。\n\nすぐ【過ぐ】\n\nなぐ【凪ぐ／和ぐ】\n\n> 也可以是四段活用。\n\nねぐ【労ぐ／犒ぐ】\n\n以下的复合动词，基本上仅用于文语。\n\nおもひすぐ【思ひ過ぐ】\n\nさしすぐ【差し過ぐ】\n\nさだすぐ【時過ぐ】\n\nちりすぐ【散り過ぐ】\n\nひきすぐ【引き過ぐ】\n\nみなぐ【見和ぐ】\n\n口语形。\n\nすぎる【過ぎる】\n\n以下的复合动词有相应的文语形。\n\nいいすぎる【言（い）過ぎる】\n\nいきすぎる【行（き）過ぎる】\n\nうちすぎる【打（ち）過ぎる】\n\nくいすぎる【食（い）過ぎる】\n\nたべすぎる【食べ過ぎる】\n\nできすぎる【出来過ぎる】\n\nですぎる【出過ぎる】\n\nとおりすぎる【通り過ぎる】\n\nねすぎる【寝過ぎる】\n\nはしりすぎる【走り過ぎる】\n\nやきすぎる【焼（き）過ぎる】\n\nゆきすぎる【行（き）過ぎる】\n"},{"title":"日语文语ワ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-wa/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ワ上二`。\n\n实际上只有一个动词。\n\nう【居／坐】\n\n《動詞「ゐ（居）る」（上一）の古形で終止形だけが残存するが、上二段活用と考えられる》\n"},{"title":"日语文语ラ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-ra/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ラ上二`。\n\n给出 weblio ラ行上二段活用的动词一览。可能有些缺漏。\n\n[https://www.weblio.jp/parts-of-speech/%E3%83%A9%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%83%A9%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n最早接触的ラ行上一段活用的动词，应该主要就是おりる【下りる／降りる】还有かりる【借りる】之类的吧，实际上也确实没几个。\n\nおる【下る／降る】\n\nこる【懲る】\n\nふる【旧る】\n\nゆる【許る／聴る】\n\nおそる【恐る／怖る／畏る／懼る】\n\n此处给出《学研全訳古語辞典》的注解。\n\n> 上代は上二段活用。中古も、活用の基本は上二段活用。下二段活用が生じるのは中古初期であるが、中世になるとほぼ下二段活用に統一された。四段活用と見られる例が中古から見えるが、昔の用法をまねた誤った使い方だったらしい。\n\n再给出《大辞泉》的注解。\n\n> [補説] 古語では、「かつは人の耳におそり、かつは歌の心に恥ぢ思へど」〈古今・仮名序〉のように、上二段・四段のいずれかはっきりしない例が多いが、上二段活用のほうが多く現れる。\n\n以下的复合动词，基本上仅用于文语。\n\nあもる【天降る】\n\n> 《「あまおる」の音変化》\n\nみこる【見懲る】\n\nうちふる【打ち古る】\n\nききふる【聞き旧る／聞き古る】\n\nことふる【事旧る／言旧る】\n\nとこふる【床旧る】\n\nなきふる【鳴き旧る】\n\nみみふる【耳旧る】\n\nものふる【物古る／物旧る】\n\nおぢおそる【怖ぢ恐る】\n\n口语形。\n\nおりる【下りる／降りる】\n\nかりる【借りる】\n\n> 《動詞「か（借）る」（四段）の上一段化》\n>\n> [補説] 上一段活用の「借りる」が用いられるのは近世後期の江戸語から。今日、共通語では「借りる」であるが、関西では五段活用の「借る」が用いられる。\n\nこりる【懲りる】\n\nたりる【足りる】\n\n> [補説] 四段活用の「足る」から転じ、近世から江戸で用いられるようになったもの。\n\n可以看到，多了かりる【借りる】和たりる【足りる】，这两个是四段活用的「借る」和「足る」的上一段化。\n\n以下的复合动词有相应的文语形。注意【足りる】那几个复合动词的文语形，主要是四段活用的形式。\n\nかけおりる【駆（け）降りる／駈け降りる】\n\nとびおりる【飛（び）降りる／飛（び）下りる】\n\nまいおりる【舞（い）降りる】\n\nあきたりる【飽（き）足りる】\n\nみちたりる【満（ち）足りる】\n\nことたりる【事足りる】\n\nものたりる【物足りる】\n\n"},{"title":"日语特殊的一段动词整理","url":"/japanese-verb-special-ichidan/","content":"\n# 写在开头\n\n写在最前面，是碳酸氢镭大佬的[这篇回答](https://www.zhihu.com/question/20279652/answer/2005733533)，给了我相当多的帮助和启发。再次再次感谢大佬！\n\n国内很多营销号硬生生地整理了所谓特殊的五段动词，或者叫一类动词。什么 26 个，33 个，34 个，各种牛鬼蛇神都蹦出来了。。。当然了，从观察来看，十几年来基本是这种情况，营销号自然是不会在意这些的。\n\n国内使用学校文法的教材不多，《标日》也只是在前言里提及和对比。这些教材教动词主要是将ます形，也就是连用形后接ます。像《标日》对于所谓一类、二类、三类动词的分类和定义，相对来说就不算那么明确，感觉勉勉强强，见初级第 14 课的语法解释 1。然而，《标日》都认为需要特别记忆的也是二类动词，而不是网上各种所谓特殊的一类动词。\n\n那么首先就要求，需要明确地知道对于那几种动词的定义和分类。如果还不清楚关于五段动词，一段动词等等的定义，或者不清楚关于活用的概念的话，还是先去了解为好。本质上，学校文法对于动词的分类就是根据活用的不同来分类的。\n\n很多所谓营销号的逻辑是这样的。已知，一段动词的**词尾**是イ段假名或エ段假名加上「る」，然后他们就推导出了，**动词结尾**是イ段假名或エ段假名加上「る」的动词都是一段动词。不多评价。\n\n# 省流\n\n简单来说，标题说的特殊的一段动词，指的是一段动词中，整个动词的基本形仅由一个イ段假名或エ段假名加上「る」构成的那些动词。按词典对词尾的定义，某种意义上认为，这些词整个就是词尾，没有词干。或者认为，这些词不分词尾和词干，也行。\n\n即使没有关于古典文法，或者叫文语文法的基础，如果手头有词典，熟练使用 weblio 等网站工具的话，想想也知道这些特殊的一段动词极其容易通过枚举就能自己整理出来。如果只是想知道有哪些，那么自己去查去整理就行，或者看之前说的那位大佬的回答。虽然人家少写了几个，但是常用的人家都列出来了，人家讲的还是很清楚的。\n\n将口语里特殊的一段动词分成上一段和下一段，各有其直接来源。由于之前我写了下面两篇文章作为铺垫，本篇的正文部分内容不会很多。\n\n特殊的上一段动词，直接来源，是文语上一段活用的动词。\n\n[文语上一段活用的动词](/japanese-verb-literary-kamiichidan)\n\n特殊的下一段动词，直接来源，是文语下二段活用的特殊动词。\n\n[文语下二段活用的特殊动词](/japanese-verb-special-shimonidan)\n\n加起来一共十来个，比营销号所谓二三十多个方便不少。\n\n# ける【蹴る】\n\n这个词在口语中是五段。在文语文法中，是唯一一个下一段活用的动词。江户后期逐渐四段化。\n\n而再往古了说，这个词本来是ワ行下二段，「くう」。或者认为是クヮ行下一段，「く`𛅑`る」。中间那个字符如果没显示出来，那个是小的ゑ，U+1B151。\n\n具体见《大辞泉》等资料。\n"},{"title":"日语文语ザ行上二段活用的动词整理","url":"/japanese-verb-kaminidan-za/","content":"\n[上二段活用](/japanese-verb-kaminidan)\n\nweblio 全文搜索`ザ上二`。\n\n给出 weblio ザ行上二段活用的动词一览。\n\n[https://www.weblio.jp/parts-of-speech/%E3%82%B6%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1](https://www.weblio.jp/parts-of-speech/%E3%82%B6%E8%A1%8C%E4%B8%8A%E4%BA%8C%E6%AE%B5%E6%B4%BB%E7%94%A8_1)\n\n好像就一两个。一般的资料甚至不会说到ザ行的上二段活用。还得是 weblio。\n\nこず【抉ず】\n\nねこず【根掘ず】\n\n> ［動］《活用は四段か上二段か未詳》\n\n"},{"title":"日语文语下二段活用的特殊动词整理","url":"/japanese-verb-special-shimonidan/","content":"\n本篇可以认为是延续之前关于文语上一段活用的动词整理的那篇内容。本篇整理之后，口语（现代日语）的所有所谓特殊的一段动词的所有来源就都整理清楚了。再次感谢碳酸氢镭大佬！\n\n标题中说的特殊，指的是整个动词的终止形就是由一个ウ段假名构成，这样整个词既是词干又是词尾。和之前类似，同样主要在 weblio 枚举查找。\n\n一共查到共有 6 个特殊的动词。\n\n| 行   | 動詞             |\n| ---- | ---------------- |\n| ア行 | う【得】         |\n| カ行 | く【消】         |\n| ダ行 | づ【出】         |\n| ナ行 | ぬ【寝】         |\n| ハ行 | ふ【経】ふ【綜】 |\n\n虽然《大辞泉》和《学研全訳古語辞典》没有明说，不过容易理解的是，ふ【経】和ふ【綜】应该是具有同源关系。如果看成一个词的话，那说是 5 个特殊的动词也行。\n\n上面这些词的口语形，具体如下。这些构成了口语中，所有特殊的下一段动词。\n\n| 行   | 動詞                           |\n| ---- | ------------------------------ |\n| ア行 | える【得る】                   |\n| ダ行 | でる【出る】                   |\n| ナ行 | ねる【寝る／寐る】             |\n| ハ行 | へる【経る／歴る】へる【綜る】 |\n\n# 补充\n\n《大辞泉》く【消】：\n\n[補説] 「消ゆ」に先行する上代語とされるが、活用形は大半が連用形である。終止形の例とされる「四〇二四」を「来らし」とする説もあり、また、未然・連用形の「け」は「消ゆ」の未然・連用形「きえ」の音変化とする説もある。\n\n《学研全訳古語辞典》く【消】：\n\n上代に用いられたが、連体形・已然形・命令形の確かな用例は見当たらない。\n\n《大辞泉》でる【出る】：\n\n[補説] 文語の下二段動詞「出(い)づ」の連体形「いづる」が終止形としても用いられるようになり、それがさらに「づる」に変化し、この「づる」が下一段化してできた形。\n\n《学研全訳古語辞典》づ【出】：\n\n「い（出）づ」の「い」が脱落したもの。上代語。\n"},{"title":"关于「抛」和「拋」","url":"/po/","content":"\n同样地，这里不多谈关于字理的内容，主要是简单谈论使用现状。\n\n前者是 U+629B，后者是 U+62CB。\n\n陆标是将前者作为正体，港标台标将后者作为正体。\n\n对于日本，JIS X 0213 收前者而无后者。那边的字体也基本没做后者。该字在《常用汉字表》外，实际使用时，相关汉语词中，常使用汉字音相同的「放」字作为代用字。汉字检定是将后者作为标准字体【標準字体】，前者作为异体字，容许字体【許容字体】。估计是考虑到设备和字体等因素，在汉检的网站中是使用图片来显示后者以及相关词。\n\n[https://www.kanjipedia.jp/kanji/0006353600](https://www.kanjipedia.jp/kanji/0006353600)\n\nweblio 中，相关的字和词条基本是使用前者。日本那边的网页主要也是使用前者为多。\n\n然而这次主要是想说的是韩国，确切地说是 Naver 的一些字体的操作。那边的字符集标准 KS X 1001 也是收前者而无后者。后者收在了人名用追加汉字表。那边字体也基本是没做后者，对于「抛」字形也是正常做成「九」形。\n\n而 Naver 中的一些字体，也是做了「抛」没做「拋」，但是将前者「抛」的字形做成了「尢」形，也就是做成后者的字形。\n\n比如，在韩国国立国语院，查询포기(抛棄)，相关词，就可以看到他「抛」显示的字形是「尢」形。一看，他汉字使用的字体是`NanumBarunGothic`，나눔바른고딕。Nanum 나눔是 Naver 的一个字体系列。粗糙理解为，这是 Nanum 的一款正体字体。\n\n[https://hangeul.naver.com/fonts/search?f=nanum](https://hangeul.naver.com/fonts/search?f=nanum)\n\n那边的汉字词典，认为后者是正体，前者是俗字，虽然没有明面上的汉字使用标准规范，我姑且认为 Naver 也是认为后者更正一些吧。\n\nNanum 系列中，其他有些字体也是把「抛」做成了「尢」形，这里不多列举。感觉多少有点骚操作，没有选择做后者，而是把前者的字形做成后者的样子。虽说这种情况应该算比较少见。\n"},{"title":"日语文语上一段活用的动词整理","url":"/japanese-verb-literary-kamiichidan/","content":"\n文语上一段活用的动词屈指可数，这个不用多说。\n\n网上查找资料的过程中，很难看到一篇内容，能完整把文语上一段活用的所有基本的动词列出且内容无误。像是日语 wikipedia，我之前看的时候倒是比较全，只是缺了ひる【簸る】，我把这个补充了上去。\n\n「時雨の町」的这篇文章，算是列举的相对完整的，主要是口语。\n\n[https://www.sigure.tw/learn-japanese/grammar/n5/19](https://www.sigure.tw/learn-japanese/grammar/n5/19)\n\n大部分找到的资料，列出的基本是 9 个或者 10 个的样子，总归是缺那么几个。\n\n最初的动机是在你乎看到碳酸氢镭大佬的[这篇回答](https://www.zhihu.com/question/20279652/answer/2005733533)，以此为启发并产生了思路，整理了这篇内容。感谢大佬！\n\n# 总览\n\n文语上一段活用的动词，分布在カ行，ナ行，ハ行，マ行，ヤ行，ワ行。\n\n首先给出最基本的动词的列表。可以粗糙的认为是上古日语【上代日本語】。\n\nきる【着る】\n\nにる【似る】にる【煮る】\n\nひる【簸る】\n\nみる【見る／視る／観る】みる【廻る／回る】\n\nいる【射る】いる【沃る】いる【鋳る】\n\nゐる【率る／将る】ゐる【居る】\n\nまゐる【参る】\n\n注意到这里没有ひる【嚔る】，ひる【干る／乾る】，这两个在上代是上二段活用的动词「ふ」。\n\n关于まゐる【参る】的资料如下。\n\n> [補説] 上代に、連用形「まゐ」のほか、「まいく」「まいず」「まいのぼる」など複合動詞の一部としての例がみられるだけなので、終止形が「まう」のワ行上二段活用とする説もある。\n\n关于五段动词まいる【参る】的解释如下。\n\n> 《上一段活用動詞「まいる」に「い（入）る」の付いた「まいいる」の音変化で、貴人のもとに参入する意が原義》\n\n然后，给出中古日语【中古日本語】时候的列表。\n\nきる【着る】\n\nにる【似る】にる【煮る】\n\nひる【嚔る】ひる【干る／乾る】ひる【簸る】\n\nみる【見る／視る／観る】みる【廻る／回る】\n\nいる【射る】いる【沃る】いる【鋳る】\n\nゐる【率る／将る】ゐる【居る】\n\nまゐる【参る】\n\n这里就加上了ひる【嚔る】，ひる【干る／乾る】。\n\n接着是近代日语【近世日本語】的列表。\n\nきる【着る】\n\nあきる【飽きる／厭きる／倦きる】\n\nにる【似る】にる【煮る】\n\nひる【嚔る】ひる【干る／乾る】ひる【簸る】\n\nみる【見る／視る／観る】みる【廻る／回る】\n\nうらみる【恨みる】\n\nいる【射る】いる【沃る】いる【鋳る】\n\nゐる【率る／将る】ゐる【居る】\n\n加了あきる【飽きる】，这个是四段活用的「あ（飽）く」的上一段化。\n\n> 《動詞「あ（飽）く」（四段）の上一段化。近世後期、江戸で使われはじめた語》\n\n加了うらみる【恨みる】同「恨む」，原先是上二段活用。\n\n> [補説] 上二段活用の動詞「恨む」は近世以降、四段化したが、近代でも上一段の例がある。\n\n这里就把まゐる【参る】去掉了。\n\n这里没有把わにる，じゃみる，这几个列在上面。关于わにる，じゃみる的内容相对较少，如果直接在搜索引擎搜わにる，会看到资料是关于方言之类的。\n\n这些动词的口语形，具体如下。这些构成了口语中，所有特殊的上一段动词。\n\nいる【射る】いる【鋳る】いる【居る】\n\nきる【着る】\n\nにる【似る】にる【煮る】\n\nひる【干る／乾る】\n\nみる【見る】\n\n相比之前的列举，有些动词没列在里面，有一些的口语形基本很少用了，但是他们的一些复合动词却仍用于口语。\n\n# 可以理解为复合动词的词\n\n下面表格列举的，主要是那些写成一个汉字加送假名，但实际上是复合动词的词。\n\n| 行   | 動詞                         | 分析               |\n| ---- | ---------------------------- | ------------------ |\n| ハ行 | はなひる【嚔ひる】【嚔る】   | 鼻(はな)嚔(ひ)る   |\n| マ行 | おもひみる【思ひ見る／惟る】 | 思(おも)ひ見(み)る |\n| マ行 | おもんみる【惟る】           | 前者の音変化       |\n| マ行 | かがみる【鑑みる】           | 影(かげ)見(み)る   |\n| マ行 | かんがみる【鑑みる／鑒みる】 | 前者の音変化       |\n| マ行 | かへりみる【顧みる】         | 返(かへ)り見(み)る |\n| マ行 | かへりみる【省みる】         | 同上               |\n| マ行 | こころみる【試みる】         | 心(こころ)見(み)る |\n| ワ行 | ひきゐる【率ゐる】           | 引(ひ)き率(ゐ)る   |\n| ワ行 | もちゐる【用ゐる】           | 持(も)ち率(ゐ)る   |\n\n上表里大部分的词可以在《大辞泉》查找到相应的词源分析。\n\n同样列出上面这些词在现代日语中的表现。\n\nひきいる【率いる】\n\nもちいる【用いる】\n\nおもいみる【思い見る／惟る】\n\nおもんみる【惟る】\n\nかえりみる【顧みる】\n\nかえりみる【省みる】\n\nかがみる【鑑みる】\n\nかんがみる【鑑みる／鑒みる】\n\nこころみる【試みる】\n\n下面是一些补充。\n\nはなひる【嚔ひる】：鼻(はな)嚔(ひ)る。关于「嚔」和「嚏」，之前有写文章说明相应的情况，不多说。\n\nかがみる【鑑みる】：《大辞泉》标注了是「鏡(かがみ)」的动词化。从词源来看，かがみ【鏡／鑑／鑒】一般认为是来自「影(かげ)見(み)」，绕了一圈，其实还是可以看成是复合动词。\n\nかんがみる【鑑みる／鑒みる】：上一个词的音变。需要补充的是，有的词典可能为了区分这两个词，将上一个词，也就是かがみる的汉字表记写成【鑑る】。\n\n# みる【廻る】\n\n这个词的用例大概确实不多。《大辞泉》给的例句是在《古事記》。\n\nうちみる島の崎々、かきみる磯の崎落ちず\n\n打ち廻る 島の崎々 掻き廻る 磯の崎落ちず\n\n宇知微流 斯麻能佐岐耶岐 加岐微流 伊蘇能佐岐淤知受\n\n[https://kojiki.kokugakuin.ac.jp/kojiki/%e5%85%ab%e5%8d%83%e7%9f%9b%e7%a5%9e%e2%91%a3/](https://kojiki.kokugakuin.ac.jp/kojiki/%e5%85%ab%e5%8d%83%e7%9f%9b%e7%a5%9e%e2%91%a3/)\n\n[https://miko.org/~uraki/kuon/furu/text/kojiki/01.htm#ko1_05](https://miko.org/~uraki/kuon/furu/text/kojiki/01.htm#ko1_05)\n\n# 复合动词\n\nききあきる【聞（き）飽きる】\n\nくいあきる【食（い）飽きる／食い厭きる】\n\nできる【出来る】《カ変動詞「でく（出来）」の連体形「でくる」から》\n\nみあきる【見飽きる】\n\nあいみる【相見る／逢い見る】\n\nあおぎみる【仰ぎ見る】\n\nうしろみる【後ろ見る】\n\nうちみる【打（ち）見る】\n\nかいまみる【垣間見る】《「かきまみる」の音変化》\n\nかきまみる【垣間見る】\n\nけごみる【警固見る】\n\nこぎみる【漕ぎ回る】\n\nしばみる【屡見る】\n\nすかしみる【透かし見る】\n\nたちみる【立ち見る】\n\nとりみる【執り見る／取り見る】\n\nぬすみみる【盗み見る】\n\nのぞきみる【覗き見る】【覘き見る】\n\nふりさけみる【振り放け見る】\n\nものみる【物見る】\n\nゆめみる【夢見る】\n\nうちみる【打ち廻る】\n\nゆきみる【行き廻る】\n"},{"title":"《新世纪日本语教程 初级》第 4 课单词的韩语对译词整理","url":"/shinseiki-shokyuu-korean-4/","content":"\nざっし【雑誌】\n\n잡지(雜誌)\n\nよっつ【四つ】\n\n네\n\nがっこう【学校】\n\n학교(學校)\n\nゆっくり\n\n천천히\n\nカップ\n\n컵(cup)\n\nいっぱい【一杯】\n\n没有完全同义的汉字词。表名词含义的时候，多用한잔(한盞)。表副词含义的时候，一般用固有词가득，或者相关的가득히，그득，等等。\n\nおんな【女】\n\n没有完全同义的固有词，一般直接用汉字여(女)或者汉字词여자(女子)。\n\n虽说用계집아이对译了おんなのこ【女の子】，但계집一般是贬称，谦辞，姑且作为参考。\n\nかんじ【漢字】\n\n한자(漢字)\n\nてんき【天気】\n\n천기(天氣)\n\nにほん【日本】\n\n일본(日本)\n\nしんぶん【新聞】\n\n신문(新聞)\n\nだんじょ【男女】\n\n남녀(男女)\n\nおかあさん【お母さん】\n\n어머니\n\nまあまあ\n\n웬만하다\n\n어지간하다\n\nおにいさん【お兄さん】\n\n오빠\n\n女性称呼哥哥。词源可能是오라비加上아。\n\n男性称呼哥哥一般是用형님(兄님)。\n\nちいさい【小さい】\n\n작다\n\nすうがく【数学】\n\n수학(數學)\n\nふうぞく【風俗】\n\n풍속(風俗)\n\nえいご【英語】\n\n영어(英語)\n\nけいざい【経済】\n\n경제(經濟)\n\nおねえさん【お姉さん】\n\n누나\n\n男性称呼姐姐。词源可能是누이加上님加上아。\n\n女性称呼姐姐一般是用언니。\n\nおとうさん【お父さん】\n\n아빠\n\nほうほう【方法】\n\n방법(方法)\n\nおおきい【大きい】\n\n크다\n\nデパート\n\n一般不用外来词，更多用汉字词백화점(百貨店)，当然了这个词在日语是有的。\n\nきゃく【客】\n\n객(客)\n\n更常用固有词손特别是敬语손님。\n\nじしょ【辞書】\n\n很少用사서(辭書)，更常用사전(辭典)，当然了这个词在日语是有的。\n\nおちゃ【お茶】\n\n차(茶)\n\nかいしゃ【会社】\n\n회사(會社)\n\nじゅんび【準備】\n\n준비(準備)\n\nチャンス\n\n一般不用外来词，更多用汉字词기회(機會)，当然了这个词在日语是有的。\n\nしゅっちょう【出張】\n\n출장(出張)\n\nしょっき【食器】\n\n식기(食器)\n\nしゅっせき【出席】\n\n출석(出席)\n\nちょっと\n\n잠깐\n\n词源相当于「暫」加上「-ㅅ」加上「間」。\n\nきょうしつ【教室】\n\n교실(教室)\n\nきゅうじつ【休日】\n\n휴일(休日)\n\nちゅうごく【中国】\n\n중국(中國)\n\nりゅうがく【留学】\n\n유학(留學)\n"},{"title":"《新世纪日本语教程 初级》第 3 课单词的韩语对译词整理","url":"/shinseiki-shokyuu-korean-3/","content":"\nそら【空】\n\n하늘\n\n另外，하늘可能更适合用あめ【天】或者あま【天】对译。\n\nとり【鳥】\n\n새\n\nはる【春】\n\n봄\n\nこれ\n\n이\n\n이거\n\nろく【六】\n\n육(六)\n\nわたし【私】\n\n나\n\nかいわ【会話】\n\n회화(會話)\n\nテニス\n\n테니스(tennis)\n\nがいこく【外国】\n\n외국(外國)\n\nぎかい【議会】\n\n의회(議會)\n\nぐあい【具合】\n\n没有完全同义的词。상황(狀況)和상태(狀態)在日语中是有相同的汉语词的。모습的词源可能是「貌襲」，意思是样子，模样，状况。其他的不赘述。\n\nひがし【東】\n\n没有单纯的固有词。更常用汉字동(東)，要么就是使用동쪽(東쪽)，或者동녘(東녘)，等等。\n\nかいぎ【会議】\n\n회의(會議)\n\nごご【午後】\n\n오후(午後)\n\nがたがた\n\n달달\n\n덜덜\n\n第一个是拟小词，第二个是拟大词。\n\nざせき【座席】\n\n좌석(座席)\n\nかじ【家事】\n\n가사(家事)\n\nちず【地図】\n\n지도(地圖)\n\nかぜ【風】\n\n바람\n\nかぞく【家族】\n\n가족(家族)\n\nだいがく【大学】\n\n대학(大學)\n\nちぢむ【縮む】\n\n줄다\n\nつづく【続く】\n\n잇다\n\nでる【出る】\n\n나다\n\n나가다的词源相当于나다加上가다，强调的是出去。相应地，나오다的词源相当于나다加上오다，强调的是出来。\n\nどこ\n\n어디\n\nそば【側／傍】\n\n곁\n\n옆\n\nテレビ\n\n텔레비\n\n《标准国语大词典》有该词，但是标准的表记是텔레비전(television)。\n\nあぶら【油】\n\n기름\n\nたべる【食べる】\n\n먹다\n\nぼく【僕】\n\n나\n\n아랫것意思是下人，字对字的对应可能更适合したもの【下物】，虽然意思不同，要么就得用汉语词げにん【下人】。\n\nパス\n\n패스(pass)\n\nピアノ\n\n피아노(piano)\n\nプラス\n\n플러스(plus)\n\nオペラ\n\n오페라(opera)\n\nポスト\n\n一般不用外来词，更多用汉字词우체통(郵遞筒)或者우편통(郵便筒)。\n\n"},{"title":"关于「叱」和「𠮟」","url":"/shikaru/","content":"\n相比于之前写的关于「嚏」和「嚔」的那篇，关于「叱」和`「𠮟」`已有的的资料文章已经很多。本篇同样是简单谈论使用现状，不多涉及关于字理还有语法的内容。\n\n[https://dictionary.sanseido-publ.co.jp/column/%e7%ac%ac49%e5%9b%9e-%e3%80%8c%e5%8f%b1%e3%80%8d%e3%81%a8%e3%80%8c%f0%a0%ae%9f%e3%80%8d](https://dictionary.sanseido-publ.co.jp/column/%e7%ac%ac49%e5%9b%9e-%e3%80%8c%e5%8f%b1%e3%80%8d%e3%81%a8%e3%80%8c%f0%a0%ae%9f%e3%80%8d)\n\n[https://hydrocul.github.io/wiki/blog/2014/1201-shikaru.html](https://hydrocul.github.io/wiki/blog/2014/1201-shikaru.html)\n\n[https://note.com/takeotamashiro/n/n67ac6fb56de5](https://note.com/takeotamashiro/n/n67ac6fb56de5)\n\n[https://note.com/ryohji/n/n37051ab643bf](https://note.com/ryohji/n/n37051ab643bf)\n\n[https://ogwata.hatenadiary.org/entry/20100129/p1](https://ogwata.hatenadiary.org/entry/20100129/p1)\n\n前者是 U+53F1，后者是 U+20B9F，在扩展 B 区。\n\n该字在 2010 年追加到了日本《常用汉字表》，并且是将后者作为正体，前者作为异体字。是目前《常用汉字表》中唯一一个不在 Unicode Plane 0 的。考虑到使用程度，设备环境，字体等因素，汉字检定使用前者也是 ok 的。\n\n[https://www.kanjipedia.jp/kanji/0002920800](https://www.kanjipedia.jp/kanji/0002920800)\n\n使用微软日语输入法，输入「しかる」的候选词里面，给出的字符是后者。而在手机使用常规的日语键盘，输入「しかる」的候选词，给出的一般是前者。\n\n在 weblio デジタル大辞泉，词条和内容都是使用后者，然而由于在扩展 B 区，weblio 的检索不支持直接搜索后者这个字，以及包含该字的词，一搜就会转成 2 个半角问号。只能是用前者搜索，这样能搜到相应的词条。\n\n而在「漢字辞典オンライン」中，他里面的「常用漢字一覧表」里用的是后者，在「常用漢字の改定」列表里用的又是前者。\n\n[https://kanji.jitenon.jp/](https://kanji.jitenon.jp/)\n\n[https://kanji.jitenon.jp/cat/joyo](https://kanji.jitenon.jp/cat/joyo)\n\n[https://kanji.jitenon.jp/cat/joyo_henko2010](https://kanji.jitenon.jp/cat/joyo_henko2010)\n\n在《康熙字典》网上版，在「叱」字头，拼音给的是 hua4 和 e2，而词条内容给的是「音`𩾔`。訶也。」等等，在`「𠮟」`字头，拼音给的是 chi4，而词条内容是「音化。開口貌。」等等。对照他网站自己提供的影印本的话，字头的顺序应该没错，应该是两者的词条内容标注反了。\n\n[https://kangxizidian.com/v2/index2.php?page=803](https://kangxizidian.com/v2/index2.php?page=803)\n"},{"title":"《新世纪日本语教程 初级》第 2 课单词的韩语对译词整理","url":"/shinseiki-shokyuu-korean-2/","content":"\n同样是简单整理，加点补充。\n\nあなた【貴方】\n\n그대\n\nうえの【上野】\n\nにく【肉】\n\n基本不单独使用汉字육(肉)，而是使用固有词살。大概是考虑到육(肉)和其他一些常用的汉字同音。\n\nいぬ【犬】\n\n개\n\nねこ【猫】\n\n고양이\n\nひと【人】\n\n사람\n\nはな【花】\n\n꽃\n\nさいふ【財布】\n\n지갑(紙匣)\n\nへた【下手】\n\n하수(下手/下數)\n\n也是经典拿汉字过来读成汉字音。\n\n对于形容动词的用法へただ【下手だ】，有若干个形容词对应，不赘述。\n\nほか【他】\n\n다른\n\n基本没有词性和含义完全一致的固有词。다른是冠形词，可以对应ほかの【他の】。\n\nまえ【前】\n\n앞\n\nあめ【雨】\n\n비\n\nむすめ【娘】\n\n딸\n\n계집아이更适合对译おんなのこ【女の子】。\n\n계집애是前者的缩略词。\n\nみせ【店】\n\n가게\n\n可能源自가가(假家)。\n\nもつ【持つ】\n\n가지다\n\nへや【部屋】\n\n집칸\n\nよこ【横】\n\n가로\n\nゆめ【夢】\n\n꿈\n"},{"title":"《新世纪日本语教程 初级》第 1 课单词的韩语对译词整理","url":"/shinseiki-shokyuu-korean-1/","content":"\n整理这个就是纯属兴趣了。精力有限，大概只能简单整理前面几课的。\n\n选择对译词的原则大致如下。词性一致。尽量是和语词对应固有词，汉语词对应汉字词，外来词对应外来词。会考虑到词源和构词法。会兼顾词的常用程度。一些内容会给出备注说明。\n\n可以在韩国国立国语院的《标准国语大词典》查询。\n\n[https://stdict.korean.go.kr/main/main.do](https://stdict.korean.go.kr/main/main.do)\n\nあう【会う】\n\n만나다\n\n맞다\n\nあう【会う】和あう【合う】同源。从含义上，맞다用あう【合う】合适。\n\n만나다的词源相当于是맞다和나다。这样的话，만나다更适合用であう【出会う】对译。\n\nいえ【家】\n\n집\n\nうえ【上】\n\n위\n\nあおい【青い】\n\n푸르다\n\n파랗다\n\n퍼렇다\n\n第二个是拟小词（小轻形），第三个是拟大词（大重形），词源相当于是第一个加上连接词尾아/어加上하다。\n\n相关术语如下。\n\n元音和谐，元音调和\n\n모음조화(母音調和)\n\n拟大词，大重形\n\n큰말\n\n拟小词，小轻形\n\n작은말\n\n如果一定要通过汉字来区分后两个的话，个人感觉可以考虑用あおい【青い】对译파랗다，用あおい【蒼い】对译퍼렇다。\n\nえき【駅】\n\n역(驛)\n\nいく【行く】\n\n가다\n\n另外，가다也适合用さる【去る】对译。\n\nかう【買う】\n\n사다\n\nここ\n\n이곳\n\n여기\n\nいけ【池】\n\n못\n\n연못(蓮못)\n\n못有其他含义，现代更常用연못(蓮못)。\n\nいす【椅子】\n\n의자(椅子)\n\nそこ\n\n그곳\n\n거기\n\nかさ【傘】\n\n没有完全同义的固有词，常用的是汉字词우산(雨傘)。\n\n硬要说的话，有个词가리개，意思是屏风，罩子。\n\nしあい【試合】\n\n시합(試合)\n\n应该就是来自日语，经典用汉字音来读，成为汉字词。\n\nせかい【世界】\n\n세계(世界)\n\nつくえ【机】\n\n没有完全同义的固有词，常用的是汉字词책상(冊床)。\n\n另外，마루指的是房屋中的木地板，是对应えんがわ【縁側】或ゆか【床】。\n\nことし【今年】\n\n올해\n\nちかてつ【地下鉄】\n\n지하철(地下鐵)\n\nたかい【高い】\n\n높다\n\nおとこ【男】\n\n사나이\n\n사내是前者的缩略词。\n\n从词源上看，考虑到사나이后面部分相当于아이，おとこ【男】后面也是こ【子】，用사나이来对译おとこ【男】看来还不错。\n\n常用汉字남(男)或者汉字词남자(男子)。\n\n"},{"title":"关于「嚏」和「嚔」","url":"/kusame/","content":"\n本篇主要是简单谈论使用现状，不多涉及关于字理还有语法的内容。\n\n前者是 U+568F，后者是 U+5694。\n\n陆标港标台标是将前者作为正体，台标将后者作为异体字。\n\n对于日本，JIS X 0213 两者都有收。该字在《常用汉字表》外，汉字检定是将后者作为标准字体【標準字体】，前者作为异体字，容许字体【許容字体】。\n\n[https://www.kanjipedia.jp/kanji/0004991400](https://www.kanjipedia.jp/kanji/0004991400)\n\n在 weblio 古語辞典，学研全訳古語辞典，はな－・ひる【嚔る】是使用后者，然而，ひる【嚏る】是使用前者，导致了搜索词条后的结果差异。\n\n在 weblio デジタル大辞泉，词条是用的后者，然而在ひる【嚔る】的文段部分，出现「嚏(はな)ふ」，这里又写成前者。可能是将词典电子录入时候的问题。\n\n使用微软日语输入法，输入「くしゃみ」的候选词中，前者排在后者的前面。\n"},{"title":"「S blog えすぶろ」的语言学博客","url":"/kedume/","content":"\n[https://ameblo.jp/kedume/theme-10017494509.html](https://ameblo.jp/kedume/theme-10017494509.html)\n\nやまとことば・語源\n\nS blog 　－えすぶろ－\n\n试过了，在 amebla 搜索「S blog」几乎很难搜到这位，大概是名字过于泛化了，而搜索「えすぶろ」的话还行。\n"},{"title":"「気まぐれな梟」的语言学资料","url":"/ufjtmb26/","content":"\n[https://ameblo.jp/ufjtmb26/](https://ameblo.jp/ufjtmb26/)\n\n気まぐれな梟\n\n然而通过 bing 搜索找了半天，除了在 ameblo 的博客文章之外，没找到关于这位的其他相关信息，资料，个人主页之类的了。。\n\n倒是有其他网页的文章引用了这位大佬的内容，然而引用的也是在 ameblo 有的。\n\n很多挺有意思的内容，主要是关于日本方言，琉球诸语的考察研究之类。最近依然有更新博客，若干天更新一篇，挺不错。\n"},{"title":"韩语五色：元音和谐，辅音的紧张度","url":"/korean-five-colors/","content":"\n[https://www.zhihu.com/question/3989091534/answer/91486470685](https://www.zhihu.com/question/3989091534/answer/91486470685)\n\n本篇内容深受这篇博客文章的启发。非常感谢！\n\n[https://7ma.github.io/korean-color-expression/](https://7ma.github.io/korean-color-expression/)\n\n表格如下。\n\n| 오색(五色)               |        | 靑             |                | 黃             |                | 赤             | (明)           | 白             |                | 黑             |                |\n| ------------------------ | ------ | -------------- | -------------- | -------------- | -------------- | -------------- | -------------- | -------------- | -------------- | -------------- | -------------- |\n|                          |        | 큰말           | 작은말         | 큰말           | 작은말         | 큰말           | 작은말         | 큰말           | 작은말         | 큰말           | 작은말         |\n| 옛말                     |        | 프르다         | ᄑᆞᄅᆞ다       | 누르다         | 노ᄅᆞ다        | 븕다           | ᄇᆞᆰ다         | 희다           | ᄒᆡ다          | 검다           | 감다           |\n| 원형(原形)               | 여린말 | 푸르다         |                | 누르다         | 노르다         | 붉다           | 밝다           | 희다           |                | 검다           | 감다           |\n|                          | 센말   |                |                |                |                |                |                |                |                | 껌다           | 깜다           |\n| 관형형(冠形形)+색(色)    |        | 푸른색(푸른色) |                | 누른색(누른色) | 노른색(노른色) | 붉은색(붉은色) | 밝은색(밝은色) | 흰색(흰色)     |                | 검은색(검은色) | 감은색(감은色) |\n| 관형형(冠形形)+빛        |        | 푸른빛         |                | 누른빛         | 노른빛         | 붉은빛         |                | 흰빛           |                | 검은빛         | 감은빛         |\n| ㅎ불규칙활용(不規則活用) | 여린말 | 퍼렇다         | 파랗다         | 누렇다         | 노랗다         | 벌겋다         | 발갛다         | 허옇다         | 하얗다         | 거멓다         | 가맣다         |\n|                          | 센말   |                |                |                |                | 뻘겋다         | 빨갛다         |                |                | 꺼멓다         | 까맣다         |\n| 관형형(冠形形)+색(色)    | 여린말 | 퍼런색(퍼런色) | 파란색(파란色) | 누런색(누런色) | 노란색(노란色) |                | 발간색(발간色) | 허연색(허연色) | 하얀색(하얀色) | 거먼색(거먼色) | 가만색(가만色) |\n|                          | 센말   |                |                |                |                |                | 빨간색(빨간色) |                |                | 꺼먼색(꺼먼色) | 까만색(까만色) |\n| 관형형(冠形形)+빛        | 여린말 | 퍼런빛         | 파란빛         | 누런빛         | 노란빛         |                | 발간빛         | 허연빛         | 하얀빛         | 거먼빛         | 가만빛         |\n|                          | 센말   |                |                |                |                |                | 빨간빛         |                |                | 꺼먼빛         | 까만빛         |\n| 명사(名詞)               | 여린말 | 퍼렁           | 파랑           | 누렁           | 노랑           | 벌겅           | 발강           | 허영           | 하양           | 검정           | 감장           |\n|                          | 센말   |                |                |                |                | 뻘겅           | 빨강           |                |                | 껌정           | 깜장           |\n\n关于黑色，有其他需要补充的词语，单独列为表格。\n\n| 黑                    |        |          |              |\n| --------------------- | ------ | -------- | ------------ |\n|                       |        | 큰말     | 작은말       |\n| 어근(語根)/부사(副詞) | 여린말 |          | 감감(감감히) |\n|                       | 센말   | 껌껌     | 깜깜(깜깜히) |\n|                       | 거센말 | 컴컴     | 캄캄(캄캄히) |\n| 형용사(形容詞)        | 여린말 |          | 감감하다     |\n|                       | 센말   | 껌껌하다 | 깜깜하다     |\n|                       | 거센말 | 컴컴하다 | 캄캄하다     |\n\n相关的术语。\n\n五色\n\n오색(五色)\n\n> 다섯 가지의 빛깔. 파랑, 노랑, 빨강, 하양, 검정을 이른다.\n\n青黄赤白黑。表格中的五色即为按照这里说的顺序。\n\n古语\n\n옛말, 고어(古語)\n\n韩国国立国语院的《标准国语大词典》。\n\n[https://stdict.korean.go.kr/main/main.do](https://stdict.korean.go.kr/main/main.do)\n"},{"title":"「書いた人」的词源资料","url":"/kaitahito/","content":"\n[http://kaitahito.world.coocan.jp/ongogen.html](http://kaitahito.world.coocan.jp/ongogen.html)\n\n[https://ameblo.jp/gogen3000/](https://ameblo.jp/gogen3000/)\n\n日本語の語源\n\n不过我感觉内容不是很靠谱。你乎有个回答提到这个。\n\n[https://www.zhihu.com/question/543656149/answer/2590654057](https://www.zhihu.com/question/543656149/answer/2590654057)\n\n另外参考这篇文章。\n\n[https://zhuanlan.zhihu.com/p/607477773](https://zhuanlan.zhihu.com/p/607477773)\n\n总体来看，不是很靠谱，仅供参考。\n"},{"title":"沃玛 warma 在 hack.chat 使用过的聊天室","url":"/hackchat-warma/","content":"\n简单来说就是这个。\n\n[https://hack.chat/?kt1j8rpc](https://hack.chat/?kt1j8rpc)\n\n沃玛在 2019 年 3 月 8 日发的视频。\n\n[https://www.bilibili.com/video/av45636526/](https://www.bilibili.com/video/av45636526/)\n\n视频里也说了，沃玛是将聊天室链接分享到了微博，当天就有不少网友点进去聊天。\n\n"},{"title":"「香取ヒロシ」的词源资料","url":"/hiroshi/","content":"\n[https://ameblo.jp/eigo-garage/theme-10100760487.html](https://ameblo.jp/eigo-garage/theme-10100760487.html)\n\n語源考\n\nCome on by！ 英語ガレージ！　☆☆☆\n\n香取ヒロシ\n\n香取大志\n\n老师在[蓝鸟](https://x.com/EG_Hiroshi)的号有具体介绍自己。在 ameblo 的简介说，有剑桥 CPE 和 CELTA 证书。\n\n老师说是说博客的内容主要是自己的观点和推测，不过考证所用的资料很多，个人感觉还是很有参考价值。\n"},{"title":"关于「𬊇」（⿱炏乂）和「𤇾」（⿱炏冖）","url":"/u2c287/","content":"\n「`𬊇`」，⿱炏乂，U+2C287，金文隶定字，象形两个火把交叉，是「熒」的初文。这是一个比较重要的部件，常用为声符，作为部件偏旁常写为「`𤇾`」，⿱炏冖，U+241FE，简化偏旁为「`𫇦`」，⿱艹冖，U+2B1E6。\n\n以「`𬊇`」为声旁的字大概三十多个，而以「`𬊇`」为形旁的字，可以认为几乎没有。实际上，按照字统网的列举来看，带「`𬊇`」部件的字中，尚不明确形旁声旁的，是这两个：「`𡀸`」和「`𤌡`」。\n\n「`𡀸`」，《康熙字典》说是人名用字，音未详。音未详的话，那实际上不太好确定哪个是声符。不过，「同」作为表意部件的字是个位数。目前入 U 的字中，「`𠍟`」和「`𫝛`」是整体会意，「`𭁰`」是壮字，「`𨤯`」是喃字，只有一个是实打实的传统形声字：「`𣬑`」，同「掍」。具体可在字统网查。\n\n[https://zi.tools/](https://zi.tools/)\n\n「`𤌡`」说是音 ying2，说是在《龙龛》，疑同「熒」。这样的话，声旁还是「熒」。另在叶典网查的内容，除了 ying2 之外，又说是台湾人名用字，读 yao1，不过像这种人名用字的读音，实际上不适合作为字理根据。\n\n总体来看，「`𬊇`」作为声旁的情况还是占绝大多数，或者基本认为，「`𬊇`」作为汉字的组件的时候就是声旁。同样按字统网里面的结果，列举如下。此处单字不列举其简化字。\n\n```\n𡦃嫈䁝覮𦖽謍䪯𦟴䎕鎣𫒽瑩滎熒榮檾縈𤬐塋嵤褮𢄋罃醟𣂈𤍔營禜甇𤌌𤍧𨍶螢鶯煢\n```\n\n上面的这些字，在《说文》里出现的，一般他会解释为熒省声，或者是營省声，甚至是瑩省声的。前者可能还算行，后面的几个就有点抽象了。当然，「`𬊇`」毕竟是金文里的单独成字的字形，可以理解。\n\n「`𫒽`」是金文隶定字，同「鎣」。\n\n「鶯」的同构字，同时也是异写字，包括「莺/`𦾉`/`𮹘`」，排列组合还行。\n"},{"title":"关于「𪧇」（⿱宀爿）以及「㝱」","url":"/u2a9c7/","content":"\n「`𪧇`」，⿱宀爿，U+2A9C7，金文隶定字。「宀」象形房屋，上面是屋顶，两竖是墙。「爿」这里是「牀/床」的象形初文，后加「木」为「牀」，俗作「床」。「`𪧇`」含义同「牀」。\n\n[https://www.zhihu.com/question/20944335/answer/24135371](https://www.zhihu.com/question/20944335/answer/24135371)\n\n个人认为「`𪧇`」是一个比较重要的汉字部件，虽说使用不多，以他为形旁的汉字大概十来个。常用字主要就是「寢/寝」，再加上「寐」，「寤」，这些在古文常见的。按照字统网给出的资料，列举如下。注意，不是所有上面为「宀」，下面左边为「爿」的字都以「`𪧇`」为形旁。\n\n```\n寣寎寐寢寤寱㝥㝱𡩩𡩽𡪁𡪶𭔘𮄙\n```\n\n具体可以在字统网查。\n\n[https://zi.tools/](https://zi.tools/)\n\n这里面说一下「㝱」。这个实际上是「夢」的初文，象人躺在床上，眼睛眉毛等有所动作，表示在做梦。《说文》将该字作为部首，并且将上面列举中的一部分字认为是从㝱省，不够合适。当然，「`𪧇`」实际上是在甲骨文、金文里的单独成字的字形，可以理解。\n\n可以把「㝱」作为「`𪧇`」的附属部首。以「㝱」为形旁的字也是大概十多个，列举如下。字统网还列了几个未入 U 的字，此处就不列举。\n\n```\n𡫽𡬄𡬇𡬊𡬋𡬍𡬑𡬒𡬓𡬙𥩒\n```\n\n这里「`𡬑`」同「寤」，「`𡬒`」同「寱」，「`𡬓`/㝲」同「寢」。\n\n以「㝱」为声符的字，只有「`𡬌`」，从「目」。或是理解为从「`𪧇`」，「瞢」声，问题不大。大致表示那类意思。「瞢」、「夢」的声符是「`𮎳`」，U+2E3B3，可认为是「㝱」的初文。从「人」，声符是「`𥄕`」，U+25115。\n"},{"title":"关于 PowerShell 的 PSReadLine","url":"/powershell-psreadline/","content":"\n把 PowerShell 里面关于 PSReadLine 的内容单独整理出来。\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-predictors](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-predictors)\n\n预测性 IntelliSense 功能。\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-keyhandlers](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-keyhandlers)\n\n键处理程序。\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/)\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline)\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline_functions](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline_functions)\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline_release_notes](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline_release_notes)\n\n相关的主要 cmdlet 如下。\n\nGet-PSReadLineKeyHandler\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/get-psreadlinekeyhandler](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/get-psreadlinekeyhandler)\n\nGet-PSReadLineOption\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/get-psreadlineoption](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/get-psreadlineoption)\n\n获取配置选项的值。\n\n```powershell\nGet-PSReadLineOption\n```\n\nRemove-PSReadLineKeyHandler\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/remove-psreadlinekeyhandler](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/remove-psreadlinekeyhandler)\n\nSet-PSReadLineKeyHandler\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/set-psreadlinekeyhandler](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/set-psreadlinekeyhandler)\n\nSet-PSReadLineOption\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/set-psreadlineoption](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/set-psreadlineoption)\n\n设置选项。\n\n`PredictionViewStyle`选项的值，默认是`InlineView`。有需要的话，可以改成`ListView`。从使用体验来说，个人认为`ListView`感觉更好一些。\n\n```powershell\nSet-PSReadLineOption -PredictionViewStyle ListView\n```\n\n而如果只是在当前终端会话中输入相关命令，只会在当前会话中生效。如果想让以后每次用 PowerShell 的时候，`PredictionViewStyle`的值都是`ListView`，可以把相关命令写到`$PROFILE`配置文件中。\n\n```powershell\n$PROFILE\n```\n\n```powershell\nTest-Path $PROFILE\n```\n\n一般刚开始使用 PowerShell 的时候，初始是没有配置文件的。可以用以下命令创建。\n\n```powershell\nNew-Item -ItemType file -Path $PROFILE -Force\n```\n\n```powershell\nnotepad.exe $PROFILE\n```\n\n把之前那行命令复制粘贴进去保存。\n\n"},{"title":"关于格式工厂 Format Factory 的情况","url":"/format-factory/","content":"\n主要是作为备忘。\n\n格式工厂是好东西，这里还是很感谢的。然而由于某些原因，此处还是得稍微鞭尸一下。\n\n在 Scoop 的 extras bucket 里面的`format-factory`版本很落后，已经很久没更新了。即使在 aki bucket 里的，他下载速度有时候还是很慢。这个是格式工厂官网的问题，在这上面有时候下载速度就是很慢，甚至是龟速。\n\n[http://www.pcfreetime.com/formatfactory/CN/index.html](http://www.pcfreetime.com/formatfactory/CN/index.html)\n\n然而官网自己的更新的渠道都变成了下面这个。真要下载的话，建议也是在下面这个去下载。\n\n[https://softmany.com/formatfactory-windows/](https://softmany.com/formatfactory-windows/)\n"},{"title":"关于微软 Windows 系统字体","url":"/windows-font/","content":"\n[https://learn.microsoft.com/zh-cn/typography/font-list/](https://learn.microsoft.com/zh-cn/typography/font-list/)\n\n[https://learn.microsoft.com/zh-cn/typography/font-list/simsun](https://learn.microsoft.com/zh-cn/typography/font-list/simsun)\n\n[https://learn.microsoft.com/zh-cn/typography/font-list/simhei](https://learn.microsoft.com/zh-cn/typography/font-list/simhei)\n\n[https://learn.microsoft.com/zh-cn/typography/font-list/kaiti](https://learn.microsoft.com/zh-cn/typography/font-list/kaiti)\n\n[https://learn.microsoft.com/zh-cn/typography/font-list/fangsong](https://learn.microsoft.com/zh-cn/typography/font-list/fangsong)\n\n在知乎上的相关问题。\n\n[https://www.zhihu.com/question/19570775](https://www.zhihu.com/question/19570775)\n\n[https://www.zhihu.com/question/19860572](https://www.zhihu.com/question/19860572)\n"},{"title":"关于 tmux","url":"/tmux/","content":"\n[https://github.com/tmux/tmux/wiki](https://github.com/tmux/tmux/wiki)\n\n主要是备忘。\n\n# Getting Started\n\n[https://github.com/tmux/tmux/wiki/Getting-Started](https://github.com/tmux/tmux/wiki/Getting-Started)\n\n## Basic concepts\n\n### Sessions, windows and panes\n\n在 tmux，每个终端都属于一个窗格，程序在终端运行。每个窗格都有他所属的窗口。可以将窗口分成多个窗格，其中有一个是活动窗格。\n\n客户端可以建立多个会话。每个会话都有一个窗口列表，其中有一个是当前窗口。窗口可以链接到一个或多个会话。\n\n## Using tmux interactively\n\n### Creating sessions\n\n```bash\ntmux\n```\n\n单输入`tmux`的话，会默认开一个新的会话。\n\n```bash\ntmux new -s mysession\n```\n\n启动新会话。\n\n### Attaching and detaching\n\n```bash\ntmux attach -t mysession\n```\n\n进入已经存在的会话。\n\n`C-b d`退出当前会话。\n\n`C-b`指的是<kbd>Ctrl</kbd>+<kbd>b</kbd>。其他的同理。\n\n### Listing sessions\n\n```bash\ntmux ls\n```\n\n用于列出所有会话。\n\n### Creating new windows\n\n`C-b c`创建一个新窗口。\n\n### Splitting the window\n\n`C-b %`将窗口分为左右两部分。`C-b \"`将窗口分为上下两部分。\n\n### Changing the current window\n\n`C-b`加数字健，切换到指定的窗口。使用后面说的`C-b w`的方式切换可能更方便些。\n\n### Changing the active pane\n\n`C-b`加方向键，切换窗格。\n\n### Choosing sessions, windows and panes\n\n`C-b s`展示所有会话。\n\n`C-b w`展示所有窗口。\n\n### Killing a session, window or pane\n\n`C-b x`删除当前窗格。`C-b &`删除当前窗口。\n\n```bash\ntmux kill-session -t mysession\n```\n\n删除指定的会话。\n"},{"title":"关于 TLD","url":"/tld/","content":"\n[https://www.icann.org/](https://www.icann.org/)\n\n[https://icannwiki.org/](https://icannwiki.org/)\n\n[https://www.iso.org/iso-3166-country-codes.html](https://www.iso.org/iso-3166-country-codes.html)\n\nISO 3166。\n\n[https://www.iana.org/](https://www.iana.org/)\n\n[https://www.iana.org/domains/root/db](https://www.iana.org/domains/root/db)\n\n[https://data.iana.org/TLD/tlds-alpha-by-domain.txt](https://data.iana.org/TLD/tlds-alpha-by-domain.txt)\n\neTLD\n\n[https://developer.mozilla.org/zh-CN/docs/Glossary/eTLD](https://developer.mozilla.org/zh-CN/docs/Glossary/eTLD)\n\n[https://publicsuffix.org/](https://publicsuffix.org/)\n\n[https://publicsuffix.org/list/public_suffix_list.dat](https://publicsuffix.org/list/public_suffix_list.dat)\n\n这也是 Python 的 tldextract 库用到的 public suffix 列表。\n\n[https://newgtlds.icann.org/en](https://newgtlds.icann.org/en)\n\n[https://ntldstats.com/](https://ntldstats.com/)\n\n[https://ntldstats.com/tld](https://ntldstats.com/tld)\n\n上面的是各 nTLD 的数据信息。没事的话可以查查，有些很有意思的域名。\n\n[https://xyz.xyz/](https://xyz.xyz/)\n\nxyz 的官网。\n"},{"title":"VS Code 设置打开文件时自动猜测字符集编码","url":"/vscode-guess-encoding/","content":"\n省流，VS Code 是默认设置打开文件时不自动猜测字符集编码的，他一般默认按 UTF-8 编码来打开文本文件。如需勾选，将设置中`Files: Auto Guess Encoding`，该项勾选即可。如要搜索该项，其他可搜索的关键词包括：`字符集`，`编码`。或者搜索或设置`settings.json`相应的配置项`\"files.autoGuessEncoding\": true`。\n\n个人感觉 VS Code 应该默认打开这个选项会比较好。\n"},{"title":"Hexo 主题 NexT 配置","url":"/hexo-next/","content":"\n[https://theme-next.js.org/](https://theme-next.js.org/)\n\n# Getting Started\n\n[https://theme-next.js.org/docs/getting-started/](https://theme-next.js.org/docs/getting-started/)\n\n[https://theme-next.js.org/docs/getting-started/installation](https://theme-next.js.org/docs/getting-started/installation)\n\n[https://theme-next.js.org/docs/getting-started/configuration](https://theme-next.js.org/docs/getting-started/configuration)\n\n主要是关于安装，部署，配置文件的内容。\n\n# Theme Settings\n\n[https://theme-next.js.org/docs/theme-settings/](https://theme-next.js.org/docs/theme-settings/)\n\n修改主题 Scheme，一共有四种主题可选。主题可以设置为深色模式 Dark Mode，将`darkmode`的值设置为`true`即可。\n\n## Sidebar\n\n[https://theme-next.js.org/docs/theme-settings/sidebar](https://theme-next.js.org/docs/theme-settings/sidebar)\n\n侧边栏，其中可以设置头像 avatar 相关的内容。\n\n## Posts\n\n[https://theme-next.js.org/docs/theme-settings/posts](https://theme-next.js.org/docs/theme-settings/posts)\n\n关于内容预览。\n\n## Miscellaneous\n\n[https://theme-next.js.org/docs/theme-settings/miscellaneous](https://theme-next.js.org/docs/theme-settings/miscellaneous)\n\n关于代码块。\n\n# Third Party Plugins\n\n[https://theme-next.js.org/docs/third-party-services/](https://theme-next.js.org/docs/third-party-services/)\n\n## Math Equations\n\n[https://theme-next.js.org/docs/third-party-services/math-equations](https://theme-next.js.org/docs/third-party-services/math-equations)\n\n关于 $\\LaTeX$ 公式渲染。\n\n```shell\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-pandoc --save\n```\n\n另外，电脑本地也要安装 pandoc。\n\n## External Libraries\n\n[https://theme-next.js.org/docs/third-party-services/external-libraries](https://theme-next.js.org/docs/third-party-services/external-libraries)\n\n关于页面加载的动画效果。\n\n## Comment Systems\n\n[https://theme-next.js.org/docs/third-party-services/comments](https://theme-next.js.org/docs/third-party-services/comments)\n\n关于评论。\n\n## Statistics and Analytics\n\n[https://theme-next.js.org/docs/third-party-services/statistics-and-analytics](https://theme-next.js.org/docs/third-party-services/statistics-and-analytics)\n\n关于数据分析，比如显示网站的访问人数和次数，等等。\n\n## Search Services\n\n[https://theme-next.js.org/docs/third-party-services/search-services](https://theme-next.js.org/docs/third-party-services/search-services)\n\n这里只需要添加本地搜索功能即可。\n"},{"title":"关于 PowerShell","url":"/powershell/","content":"\n[https://learn.microsoft.com/zh-cn/powershell/](https://learn.microsoft.com/zh-cn/powershell/)\n\n# 概述\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/overview](https://learn.microsoft.com/zh-cn/powershell/scripting/overview)\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/what-is-windows-powershell](https://learn.microsoft.com/zh-cn/powershell/scripting/what-is-windows-powershell)\n\n这里区分 PowerShell 和 Windows PowerShell。\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/powershell-commands](https://learn.microsoft.com/zh-cn/powershell/scripting/powershell-commands)\n\ncmdlet，即 PowerShell 命令，使用动词-名词对来命名。\n\n# 安装\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows](https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows)\n\n安装之后，和旧版 Windows PowerShell 两者并存。之后比如在 VS Code 打开的终端，就会默认为这个新的 PowerShell 了。\n\n# 了解 PowerShell\n\n## 优化 shell 体验\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/optimize-shell](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/optimize-shell)\n\n### 使用 Tab 自动补全\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/tab-completion](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/tab-completion)\n\n### 使用命令预测器\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-predictors](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-predictors)\n\n关于 PSReadLine 的内容，单独整理在了一篇。\n\n[PSReadLine](/powershell-psreadline)\n\n### 使用别名\n\n[https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-aliases](https://learn.microsoft.com/zh-cn/powershell/scripting/learn/shell/using-aliases)\n\n# 参考\n\n## Microsoft.PowerShell.Core\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/)\n\n### 关于\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about)\n\n#### about_Aliases\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_aliases](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_aliases)\n\n命令的别名。\n\n```powershell\nGet-Command -Noun Alias\n```\n\n显示用于管理别名的 cmdlet。\n\n#### about_Automatic_Variables\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_automatic_variables](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_automatic_variables)\n\n关于 PowerShell 中的自动变量。\n\n`$PROFILE`\n\nPowerShell 配置文件的路径。\n\n```powershell\nTest-Path $PROFILE\n```\n\n测试是否已经创建配置文件。\n\n```powershell\nNew-Item -ItemType file -Path $PROFILE -Force\n```\n\n用于创建配置文件。\n\n```powershell\nnotepad.exe $PROFILE\n```\n\n#### about_Pipelines\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_pipelines](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_pipelines)\n\n#### about_Pipeline_Chain_Operators\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_pipeline_chain_operators](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_pipeline_chain_operators)\n\n可以使用`&&`和`||`运算符了，这就非常方便。\n\n#### about_Profiles\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles)\n\n关于 PowerShell 配置文件。\n\n参见上面的 about_Automatic_Variables 内容。\n\n### Clear-Host\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/clear-host](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/clear-host)\n\n清除显示内容，清空终端屏幕。\n\n常用的别名是`clear`。\n\n### Get-Command\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/get-command](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/get-command)\n\n用于获取命令。\n\n一个用途是查看命令的位置。\n\n```powershell\nGet-Command python\n```\n\n### Import-Module\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/import-module](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/import-module)\n\n用于将模块添加到当前会话。\n\n## Microsoft.PowerShell.Management\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/)\n\n### Copy-Item\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/copy-item](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/copy-item)\n\n复制文件。\n\n常用的别名是`cp`。\n\n### Get-ChildItem\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-childitem](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-childitem)\n\n获取指定文件路径位置中的子项。\n\n常用的别名是`ls`。\n\n### Get-Content\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-content](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-content)\n\n获取文件内容。主要是文本文件。\n\n`-TotalCount`参数，从文件的开头获取指定行数的内容。\n\n常用的别名是`cat`。\n\n### Get-Item\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-item](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/get-item)\n\n获取文件和文件夹的属性。\n\n### New-Item\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/new-item](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/new-item)\n\n用于新建文件。\n\n`-ItemType`参数，指定新建的项的类型，比如`File`和`Directory`。\n\n### Remove-Item\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/remove-item](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/remove-item)\n\n用于删除文件和文件夹。\n\n常用的别名有`rm`和`rmdir`。\n\n### Rename-Item\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/rename-item](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/rename-item)\n\n重命名文件和文件夹。\n\n### Stop-Process\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/stop-process](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/stop-process)\n\n停止进程。\n\n`-Id`参数用于指定进程的 ID。`-Name`参数用于指定进程的名称。\n\n### Test-Path\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/test-path](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/test-path)\n\n用于确定路径是否存在。\n\n## Microsoft.PowerShell.Security\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/)\n\n### Get-ExecutionPolicy\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/get-executionpolicy](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/get-executionpolicy)\n\n### Set-ExecutionPolicy\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/set-executionpolicy](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/set-executionpolicy)\n\n## Microsoft.PowerShell.Utility\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/)\n\n### Get-Culture\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/get-culture](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/get-culture)\n\n### Get-Date\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/get-date](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/get-date)\n\n### Write-Host\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/write-host](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/write-host)\n\n### Write-Output\n\n[https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/write-output](https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/write-output)\n\n相比`Write-Host`，`Write-Output`会将对象发送到管道。\n\n## PSReadLine\n\n[https://learn.microsoft.com/zh-cn/powershell/module/psreadline/](https://learn.microsoft.com/zh-cn/powershell/module/psreadline/)\n\n"},{"title":"关于 SSH","url":"/ssh/","content":"\n[https://www.ssh.com/academy](https://www.ssh.com/academy)\n\n# What is SSH (Secure Shell)?\n\n[https://www.ssh.com/academy/ssh](https://www.ssh.com/academy/ssh)\n\n# What is OpenSSH?\n\n[https://www.ssh.com/academy/ssh/openssh](https://www.ssh.com/academy/ssh/openssh)\n\n[https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_overview](https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_overview)\n\n在 VS Code 上，安装 Remote - SSH 插件。当然，这里建议直接安装 Remote Development 插件包。\n\n[https://code.visualstudio.com/docs/remote/remote-overview](https://code.visualstudio.com/docs/remote/remote-overview)\n\n[https://code.visualstudio.com/docs/remote/ssh](https://code.visualstudio.com/docs/remote/ssh)\n\n```shell\nssh user@example.com\n```\n\n虽然这里的`user@`不是必须的，但一般第一次访问服务器时，还是得写的，访问后，一般会在 SSH 配置文件中记录下来，之后访问服务器时，就不用写了。他会使用配置文件中记的用户名。\n\n# Basic overview of SSH Keys\n\n[https://www.ssh.com/academy/ssh-keys](https://www.ssh.com/academy/ssh-keys)\n\n[https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/](https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/)\n\n[https://docs.github.com/zh/authentication/connecting-to-github-with-ssh](https://docs.github.com/zh/authentication/connecting-to-github-with-ssh)\n\n[https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_keymanagement](https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_keymanagement)\n\n# How to Use ssh-keygen to Generate a New SSH Key?\n\n[https://www.ssh.com/academy/ssh/keygen](https://www.ssh.com/academy/ssh/keygen)\n\n```shell\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n```\n\n`-t`用于指定密钥的类型。默认为 rsa。不过 ed25519 具有更安全等特点，也是目前 GitHub 更推荐的类型。\n\n`-C`是可选项，用于添加注释。一般写自己的邮箱。通常还是建议写的，特别是多人使用同一服务器的场景。如果是在 GitHub 添加 SSH 密钥，那么就得写自己的账号邮箱。\n\n密钥的密码不是必需的。\n\n可以生成多个密钥，具体配置方法在下面。默认情况下，使用的是默认名字的密钥文件，文件名和密钥类型有关。\n\n`~/.ssh/id_ed25519`\n\n`~/.ssh/id_rsa`\n\n# Authorized Key in SSH\n\n[https://www.ssh.com/academy/ssh/authorized-key](https://www.ssh.com/academy/ssh/authorized-key)\n\n用于公钥认证。\n\n`~/.ssh/authorized_keys`\n\n比如在远程服务器，在上述文件中，添加一行自己的公钥。可以有多行，常见于多人使用该服务器的场景。\n\n# SSH config file for OpenSSH client\n\n[https://www.ssh.com/academy/ssh/config](https://www.ssh.com/academy/ssh/config)\n\nSSH 配置文件。\n\n`~/.ssh/config`\n\nSSH 配置文件可以在 VS Code 的远程资源管理器，直接打开。\n\n一种场景是，自己有多个 GitHub 账号，需要用到多个 SSH 密钥。\n\n以下是操作示例。\n\n```shell\nssh-keygen -t ed25519 -C \"sunboyallen@163.com\"\n```\n\n```shell\nssh-keygen -t ed25519 -C \"jihaitangguo@163.com\"\n```\n\n如果不去修改密钥文件名，那么新生成的 SSH 密钥会覆盖掉旧的。可以在生成密钥的过程进行配置，也可直接修改文件名。公钥和私钥的名字都得修改，保持一致。建议将常用的保持默认，将另一个进行修改即可。\n\n然后，将这两个密钥分别添加到所在的 GitHub 账户。\n\n以下是配置文件的写法示例。\n\n```\nHost github-jihaitangguo.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_ed25519_jihaitangguo\n```\n\n```shell\nssh -T git@github-jihaitangguo.com\n```\n\n上面的`User`项不是必需的，有些教程还会让你写成相应的用户名，虽然能用，但是是不太合适的。\n\n网上的一些教程中，会要求另一个用户，也就是默认用户，也要写入类似上面的配置，即使是使用默认配置，不过实际上不是必须的。默认用户会使用默认公钥等配置。也就是说，下面这个验证测试也是能过的。\n\n```shell\nssh -T git@github.com\n```\n\n而如果想要`ssh -T github.com`这种写法也能测试通过的话，那就加上下面的这种简略的配置。虽然个人认为没有太大的必要。道理相当于指定了默认用户为`git`。\n\n```\nHost github.com\n    HostName github.com\n    User git\n```\n"},{"title":"在 GitHub Pages 搭建 Hexo 博客","url":"/hexo/","content":"\n# 概述\n\n[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n\n在自己 GitHub 中要有一个 public 仓库，名字为`你的 GitHub 用户名.github.io`，用于部署。\n\n# 建站\n\n[https://hexo.io/zh-cn/docs/setup](https://hexo.io/zh-cn/docs/setup)\n\n# 配置\n\n[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)\n\n其中包括关于主题配置的内容。使用代替主题配置文件。\n\n# 命令\n\n[https://hexo.io/zh-cn/docs/commands](https://hexo.io/zh-cn/docs/commands)\n\n好习惯是每次`generate`之前都先`clean`一下。\n\n# 部署\n\n[https://hexo.io/zh-cn/docs/github-pages](https://hexo.io/zh-cn/docs/github-pages)\n\n[https://hexo.io/zh-cn/docs/one-command-deployment](https://hexo.io/zh-cn/docs/one-command-deployment)\n\n分支名称根据习惯设置，建议设置为`main`。\n\n# 仓库备份\n\n直接将当前博客目录作为 Git 本地备份仓库地址。\n\n`.gitignore`都帮你写好了。一般我还会在里面加上`package-lock.json`。\n\n在 GitHub 新建相应的博客仓库。\n\n# 写作\n\n[https://hexo.io/zh-cn/docs/writing](https://hexo.io/zh-cn/docs/writing)\n\n# Front-matter\n\n[https://hexo.io/zh-cn/docs/front-matter](https://hexo.io/zh-cn/docs/front-matter)\n\n# 资源文件夹\n\n[https://hexo.io/zh-cn/docs/asset-folders](https://hexo.io/zh-cn/docs/asset-folders)\n\n按照里面的设置，就可以有更方便的在 markdown 嵌入图片的方式。\n\n# 自定义\n\n## 永久链接\n\n[https://hexo.io/zh-cn/docs/permalinks](https://hexo.io/zh-cn/docs/permalinks)\n\n如果不修改，默认的每篇文章的链接是带日期的。我自己一般使用`/:title/`，这样链接简洁。\n\n## 代码高亮\n\n[https://hexo.io/zh-cn/docs/syntax-highlight](https://hexo.io/zh-cn/docs/syntax-highlight)\n"},{"title":"测试","url":"/hello-world/","content":"\n希望自己一切顺利。\n\n未来可能会写一些别的内容。\n\n以下是 $\\LaTeX$ 公式测试。\n\n$$\n\\begin{aligned}\np &= \\frac{h}{\\lambda} \\\\\n\\varepsilon &= h \\nu \\\\\n\\end{aligned}\n$$\n"}]